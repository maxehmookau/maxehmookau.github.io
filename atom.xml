<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Max Woolf - Software Developer]]></title>
  <link href="http://maxehmookau.github.io/atom.xml" rel="self"/>
  <link href="http://maxehmookau.github.io/"/>
  <updated>2014-07-02T13:17:47+01:00</updated>
  <id>http://maxehmookau.github.io/</id>
  <author>
    <name><![CDATA[Max Woolf ]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Moving from Agile Development to agile development]]></title>
    <link href="http://maxehmookau.github.io/blog/2014/07/02/moving-beyond-agile/"/>
    <updated>2014-07-02T12:57:00+01:00</updated>
    <id>http://maxehmookau.github.io/blog/2014/07/02/moving-beyond-agile</id>
    <content type="html"><![CDATA[<p>What am I talking about? I&rsquo;m talking about getting rid of &lsquo;Agile Development&rsquo;; certifications, rigid process, faux-flat company hierarchy and moving to agile development: near real-time communication, small feedback loops and empowerment of developers who are making software.</p>

<p>But I bet you&rsquo;re wondering:</p>

<blockquote><p>Why the sudden epiphany Max? Aren&rsquo;t you a big advocate of Scrum?</p></blockquote>

<p>Yeah, I was and still am to a certain extent, but I&rsquo;ve recently started a new job in a much smaller team and it&rsquo;s given me some perspective.</p>

<p>Scrum is good; great even. It still has a place amongst teams with little experience in developing software with agility. But it&rsquo;s not, and should not be the be all and end all of software development. It certainly isn&rsquo;t something that we should, as developers, aspire to as a long-term goal. It&rsquo;s a stepping stone to a better way of working and a very worthwhile one too. It&rsquo;s &lsquo;agile with training wheels&rsquo;. It quickly ingrains the principals of agile development in to its members. <strong>But we do not use training wheels forever</strong> and we definitely don&rsquo;t hand out certificates and praise to those who encourage it.  It starts to hold you back. We&rsquo;ve reached a bizarre paradox at this point. You want to go faster (be more agile), but you just can&rsquo;t because the rigid process (the stabilisers) is holding you back. You&rsquo;re ready to move on but you can&rsquo;t. The process is ingrained and beyond change.</p>

<p>As a result of this idea, why do we need ScrumMaster certifications or even the whole concept of a ScrumMaster. Not just because the name makes me cringe but because why do we want to encourage keeping the stabilisers attached? A true leader (or master if you insist) keeps the stabilisers attached for as little time as possible, empowering the people doing the work to do the best job they can and then slowly removes the stabilisers, encouraging the team to make mistakes and learn for themselves. The development team are probably smart people, you hired them after all. A bad leader says &ldquo;It&rsquo;s 11am. Time for a daily stand up because that&rsquo;s <em>what we always do</em>.&rdquo;</p>

<p>Convinced that Scrum might actually be holding you back? Ok, good. I&rsquo;m not a believer in trashing a decent concept unless there&rsquo;s a better one waiting to take its place. Like I said, that&rsquo;s small-a, agile development. To be a member of an agile development team you don&rsquo;t need a certificate, or even a fancy job title, you can be a manager if you want, team fascilitator, team leader, god of process, I don&rsquo;t care. Just make sure you do the following:</p>

<h2>Communicate</h2>

<p>All the time. Ask questions. Make sure everyone knows what everyone else is doing. Use a daily stand-up if you want. Or don&rsquo;t. <strong>Whatever works for your team.</strong></p>

<h2>Feedback to your customer <em>atleast</em> daily</h2>

<p>Two, three, four, five times daily. They&rsquo;re paying you to make something great but they run their business, they know what&rsquo;s best. They must know what you&rsquo;re doing so <strong>show them!</strong> Feedback can take many forms whether it be just a phone call to update them or a piece of shippable code so they can see a feature in progress. <strong>Whatever works for your team.</strong></p>

<h2>Spot issues early and resolve them quickly</h2>

<p>Use sprint retrospectives if you want but in my experience, once every two weeks isn&rsquo;t often enough. Problems come up unexpectedly, that&rsquo;s why they&rsquo;re called problems.  Got an issue with management? Talk to management. Got an issue with code quality? Talk to the developers. Got an issue with the client? Talk to the client.</p>

<p>What I&rsquo;ve described here is just a practical implementation of the Agile Manifesto, which is exactly what Scrum is but with less rigidity. My issue isn&rsquo;t with Scrum itself, but with its inability to change without no longer being &lsquo;Scrum&rsquo;.</p>

<p>The rest is up to your team. They&rsquo;re smart people. Empower them and they will, almost always, surprise you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ProTip: Force use of another localisation in development (Objective-C)]]></title>
    <link href="http://maxehmookau.github.io/blog/2014/06/22/welsh-language-ios-apps/"/>
    <updated>2014-06-22T20:00:00+01:00</updated>
    <id>http://maxehmookau.github.io/blog/2014/06/22/welsh-language-ios-apps</id>
    <content type="html"><![CDATA[<p>I&rsquo;m currently working on a bilingual Welsh/English app and while I was really happy to hear that iOS 8 will treat Welsh as a first class language, currently it does not. Making a Welsh localisation work is a pain.</p>

<p>I came across this handy fix to force the current build to load a Welsh localization. Assuming that you have Welsh set up as a localisation in XCode, you can force the device to think that Welsh is the first choice language and read in those strings instead of the default (in my case, English). This means when presenting to clients, I can ask the app to load in Welsh or English by changing a line of code and then submit the two apps separately to the app store.</p>

<p>In <code>main.m</code> before <code>return [UIApplicationMain ...]</code> just stick in these lines:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">langOrder</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="s">@&quot;cy&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">[[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="nl">setObject:</span><span class="n">langOrder</span> <span class="nl">forKey:</span><span class="s">@&quot;AppleLanguages&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="n">synchronize</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>Job done. Replase <code>cy</code> with <code>en</code> or any other language you have set up and you can force loading a particular language in development.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The graduate software developers' reading list]]></title>
    <link href="http://maxehmookau.github.io/blog/2014/04/28/the-graduate-software-developers-reading-lis/"/>
    <updated>2014-04-28T21:48:00+01:00</updated>
    <id>http://maxehmookau.github.io/blog/2014/04/28/the-graduate-software-developers-reading-lis</id>
    <content type="html"><![CDATA[<p>I started my first proper software development job at nearly 2 years ago now and I have done one thing more than anything else:</p>

<p><strong>READ.</strong></p>

<p>I&rsquo;ve read books on development, code, business, agile, psychology and just being a better person. Some of the books were useless. Some were excellent and some I wish I had read while I was at university. Here&rsquo;s a list of the books I&rsquo;ve read in the last 2 years on relevant subjects with a few words on the ones that stood out.</p>

<ul>
<li><p><strong><a href="http://www.amazon.co.uk/gp/product/0192803158/ref=oh_details_o01_s00_i00?ie=UTF8&amp;psc=1">Cryptography &ndash; A very short introduction.</a></strong> &ndash; A really <em>really</em> short introduction to how cryptography works. Loads of tech every day uses cryptography and most developers just take its functionality for granted. Knowing, even just a little bit, about the theory can set you apart.</p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/1781571406/ref=oh_details_o02_s00_i00?ie=UTF8&amp;psc=1">The iPhone App Design Manual: Create Perfect Designs for Effortless Coding and App Store Success</a></p></li>
<li><p><strong><a href="http://www.amazon.co.uk/gp/product/0091954673/ref=oh_details_o06_s00_i00?ie=UTF8&amp;psc=1">Remote: Office Not Required</a></strong> &ndash; A relatively new book from the makers of Basecamp. If you&rsquo;re not familiar with them, their founder created the Ruby on Rails framework and their books are excellent. This book is about how software companies can work effectively even if they&rsquo;re distributed around the globe.</p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/099134460X/ref=oh_details_o08_s00_i00?ie=UTF8&amp;psc=1">ng-book &ndash; The Complete Book on AngularJS</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/1449356265/ref=oh_details_o03_s00_i00?ie=UTF8&amp;psc=1">Graph Databases</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B007Y6KDTG/ref=oh_d__o05_details_o05__i00?ie=UTF8&amp;psc=1">Programming in Go: Creating Applications for the 21st Century</a></p></li>
<li><p><strong><a href="http://www.amazon.co.uk/gp/product/B0026OR3JO/ref=oh_d__o05_details_o05__i00?ie=UTF8&amp;psc=1">The Ruby Programming Language</a></strong> &ndash; A must-read for all Ruby developers. It goes in to the detail of how Ruby works under the hood and shows some lesser-known tricks.</p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B005R2O8Y0/ref=oh_d__o06_details_o06__i00?ie=UTF8&amp;psc=1">12 Essential Skills for Software Architects</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B008HUMTO0/ref=oh_d__o09_details_o09__i00?ie=UTF8&amp;psc=1">Effective Programming: More Than Writing Code</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B00DCWOI5G/ref=oh_d__o00_details_o00__i00?ie=UTF8&amp;psc=1">Developing Backbone.js Applications</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B005MJFA2W/ref=oh_d__o01_details_o01__i00?ie=UTF8&amp;psc=1">Thinking, Fast and Slow</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B008EKF87S/ref=oh_d__o02_details_o02__i00?ie=UTF8&amp;psc=1">Team Geek: A Software Developer&rsquo;s Guide to Working Well with Others</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B003XDUCEU/ref=oh_d__o08_details_o08__i00?ie=UTF8&amp;psc=1">Being Geek: The Software Developer&rsquo;s Career Handbook</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B007RNK0W6/ref=oh_d__o09_details_o09__i00?ie=UTF8&amp;psc=1">Test-Driven iOS Development</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B00AYQNR5U/ref=oh_d__o05_details_o05__i00?ie=UTF8&amp;psc=1">The Passionate Programmer: Creating a Remarkable Career in Software Development</a></p></li>
<li><p><strong><a href="http://www.amazon.co.uk/gp/product/B003ELY7PG/ref=oh_d__o07_details_o07__i00?ie=UTF8&amp;psc=1">ReWork: Change the Way You Work Forever</a></strong> &ndash; I hate this book. But only because it&rsquo;s so wonderful and I&rsquo;m jealous of the people who wrote it. This is <em>the</em> book for small software development companies. It cuts through all the crap so often found in software development companies. Meetings are toxic. ASAP is poison. Underdo the competition. Planning is guessing. If you read only one book on this list, make it this.</p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B000SEGEKI/ref=oh_d__o08_details_o08__i00?ie=UTF8&amp;psc=1">The Pragmatic Programmer: From Journeyman to Master</a></p></li>
<li><p><strong><a href="http://www.amazon.co.uk/gp/product/B004O0U74Q/ref=oh_d__o03_details_o03__i00?ie=UTF8&amp;psc=1">The Elements of Scrum</a></strong> &ndash; You won&rsquo;t learn this stuff at uni, but you should really know it. Scrum is a method of developing software as a team and loads of development teams use it. Learn the rules. This book is a really quick read which goes over what is expected of team members.</p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B007P5N8D4/ref=oh_d__o04_details_o04__i00?ie=UTF8&amp;psc=1">Scrum: a Breathtakingly Brief and Agile Introduction</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B004JLMDOM/ref=oh_d__o02_details_o02__i00?ie=UTF8&amp;psc=1">Ruby on Rails 3 Tutorial: Learn Rails by Example (Addison-Wesley Professional Ruby Series)</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B0054YNKYU/ref=oh_d__o03_details_o03__i00?ie=UTF8&amp;psc=1">Core Data for iOS: Developing Data-Driven Applications for the iPad, iPhone, and iPod touch </a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B003T0G9FS/ref=oh_d__o06_details_o06__i00?ie=UTF8&amp;psc=1">Letting Everything Become Your Teacher: 100 Lessons in Mindfulness</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B006ZZQHME/ref=oh_d__o07_details_o07__i00?ie=UTF8&amp;psc=1">Inside Apple</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B0068183EA/ref=oh_d__o01_details_o01__i00?ie=UTF8&amp;psc=1">How to Teach Quantum Physics to Your Dog</a></p></li>
</ul>


<p><strong><a href="https://leanpub.com/dealwithit">Deal With It: Attitude for Coders</a></strong> &ndash; Written by Gavin Davies (@gavd_uk), this book is a must-read for any developer, new or old. It&rsquo;s made up of lots of single page ideas, each one backed up by personal experience that makes it super-readable and really fun to read.</p>

<p><strong><a href="http://www.railstutorial.org/">Ruby on Rails Tutorial</a></strong> &ndash; This is <em>the</em> tutorial for all new Rails developers.</p>

<p>I&rsquo;ll be adding to this list over the next few days. Let me know which books you&rsquo;ve found most useful in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The programmer who couldn't stop]]></title>
    <link href="http://maxehmookau.github.io/blog/2014/04/20/the-programmer-who-couldnt-stop/"/>
    <updated>2014-04-20T19:11:00+01:00</updated>
    <id>http://maxehmookau.github.io/blog/2014/04/20/the-programmer-who-couldnt-stop</id>
    <content type="html"><![CDATA[<p><em>This post isn&rsquo;t techy, but talks about an issue that affects many software developers.</em></p>

<p>Until very recently I suffered from obsessive-compulsive disorder. I use the word suffer because while I still feel the effects of OCD every day, I no longer feel a sense of suffering. I have read <em>a lot</em> of books on the subject of OCD and mental health, it is a fascinating topic but I finally found a book that I haven&rsquo;t been able to put down. <em><a href="http://www.amazon.co.uk/The-Man-Who-Couldnt-Stop/dp/1447238281">&ldquo;The man who couldn&rsquo;t stop: OCD and the true story of a life lost in thought&rdquo;</a></em> is, without doubt, the best book on the subject I have ever read and anybody with even a slight interest in OCD and mental health should read this book right now.</p>

<p>The book makes a clear differentiation between being diagnosed with OCD and being <em>&lsquo;a bit OCD&rsquo;</em>. A term that has appeared all too often in popular culture. <em>&ldquo;Sorry, I have to move that there. I&rsquo;m a bit OCD.&rdquo;</em> is a stark contrast to the all-consuming fear of the feeling of guilt I would have because I didn&rsquo;t check if I had unplugged my alarm clock. Because if I didn&rsquo;t, it would catch fire and kill all of my family. <em>Obviously.</em> Let me give you a window in to that world.</p>

<p>Packed, ready to go. Turn off lights, shut doors, etc. Oh wait, did I turn off the alarm clock? I&rsquo;d better go and check. Yeah, it&rsquo;s off. I may as well turn the light off, I don&rsquo;t want to waste electricity. Did I turn it off properly? I better turn it on and off again, in case the switch didn&rsquo;t click properly. Oh, I&rsquo;ll just unplug it to make sure. Is it touching that other plug? I had better make sure they&rsquo;re not touching each other. Ok, that&rsquo;s fine now. I&rsquo;ll leave. Leave the house, lock the door, walk down the road and the feeling of anxiety hits again. I spent all that time worrying about the alarm clock but I&rsquo;m sure I left the hob on. I couldn&rsquo;t possibly go home to check it? Well, I&rsquo;d rather be late for work than burn down my home. I&rsquo;ll walk back and check. Walk home. Open the door. Check the hob. Tap each hob dial chanting &ldquo;Off&rdquo;, &ldquo;Off&rdquo;, &ldquo;Off&rdquo;, &ldquo;Off&rdquo; for each one. And again. And once more. Ok ready&hellip; no wait, one more, &ldquo;Off&rdquo;, &ldquo;Off&rdquo;, &ldquo;Off&rdquo;, &ldquo;Off&rdquo;. While I&rsquo;m here, I&rsquo;m going to check the alarm clock again. Ok, time to go to work. Lock the door. Walk to work. Get to work. <em>Did I leave the door unlocked?</em></p>

<p>I&rsquo;m lucky. While OCD symptoms used to run my life. They rarely do anymore. Anybody who&rsquo;s ever described themselves as &lsquo;a bit OCD&rsquo; should read the book. When they&rsquo;re finished, I hope they prefer to use the term &lsquo;quirky&rsquo; from now on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why agile? It works. I think.]]></title>
    <link href="http://maxehmookau.github.io/blog/2014/03/03/why-agile-it-works-i-think/"/>
    <updated>2014-03-03T20:36:00+00:00</updated>
    <id>http://maxehmookau.github.io/blog/2014/03/03/why-agile-it-works-i-think</id>
    <content type="html"><![CDATA[<p>I recently discovered that &lsquo;agile&rsquo; (small A, big a, I don&rsquo;t care.) is more than just another bullet in your sales guy&rsquo;s buzzword bullshit bingo armoury. I always had my suspicions that there was something good there, now I&rsquo;ve had a go and I get it. So here&rsquo;s a few things that I have learned. (If you&rsquo;re already doing this, none of this will be new to you but I wanted to get them written down.)</p>

<h2>You don&rsquo;t <em>do</em> agile.</h2>

<p>Without sounding like the aformentioned sales guy, you can&rsquo;t <em>do</em> agile. You can <strong>be</strong> agile. Duh.</p>

<p>In other words, you can&rsquo;t follow a strict regiment of pre-planned rules and be agile. <em>Obviously.</em> You can, however, quickly react to change. Identify issues and solve them before they become a big problem.</p>

<p>Scrum is a set of pre-planned rules that facilitate being <em>more</em> agile. But it&rsquo;s not the be all and end all. Your team will probably outgrow Scrum as they find what makes them more productive. I&rsquo;ve heard it described as &ldquo;agile with training wheels&rdquo;. I agree.</p>

<h2>People are <strong>really</strong> bad at estimating</h2>

<p>Utterly, utterly awful. <a href="http://programmers.stackexchange.com/questions/182057/why-do-we-use-story-points-instead-of-man-days-when-estimating-user-stories">Story points</a> are by no means a silver bullet, but they&rsquo;re better than estimating in hours. Try out different relative estimation techniques such as <a href="http://www.gettingagile.com/2008/07/04/affinity-estimating-a-how-to/">affinity estimation</a> or planning poker.</p>

<p><strong>Protip:</strong> Don&rsquo;t give up. It&rsquo;s hard. As my next point explains&hellip;</p>

<h2>Being agile is <strong>difficult</strong></h2>

<p>To properly implement Scrum (which is not the only way of being agile, but it&rsquo;s a good start), you may have to do things you&rsquo;d be otherwise uncomfortable with in any other social situation.</p>

<ul>
<li>Aggressively timeboxing meetings can make a Scrum Master look rude but can greatly improve the efficiency of meetings.</li>
<li>Explaining to a client that interrupting a sprint for a &lsquo;critical&rsquo; (not really critical) task can have repercussions for productivity. <a href="http://coder.cl/2012/03/programmers-are-not-resources/">(Programmers are not units of work.)</a></li>
<li>(Developers) Being empowered to get on and do your job.</li>
<li>(Managers) Trusting your developers to do their job.</li>
<li>Being &lsquo;that guy&rsquo; who says <em>&ldquo;this isn&rsquo;t going to work, we should stop.&rdquo;</em></li>
<li>Not planning months/years in advance. You may feel better, but that won&rsquo;t matter when you overshoot your deadline by 6 months. <em>Also, your client will be annoyed when you spent all that time estimating and you were wrong anyway!</em></li>
</ul>


<p>These are all things that traditional common sense say are bad. Rudeness, managers not managing, admitting defeat early on, not planning well. You shouldn&rsquo;t do these things! Except that actually they&rsquo;re fine.</p>

<ul>
<li>Rudeness isn&rsquo;t as rude when its for the good of a development team. Even if you feel uncomfortable at the time.</li>
<li>Telling clients how things are done may seem like biting the hand that feeds you. But setting expectations is equally as important.</li>
<li>Developers are smart. They don&rsquo;t need to be babysat.</li>
<li>Managers are natural risk-mitigators. But there is a clear dividing line between manager and Scrum Master.</li>
<li>Being &lsquo;that guy&rsquo; can save your company months of wasted effort and money.</li>
<li>Planning in short bursts promotes focus and accepts the fact that estimates more than 2 weeks(?) in the future are essentially useless.</li>
</ul>


<h2>Being agile is fun</h2>

<p>When your team is settled in to the agile flow, it becomes fun quickly.</p>

<p><strong>Gone</strong> are the semi-awkward &ldquo;I don&rsquo;t think we should talk about that here&rdquo; moments in the daily stand-up. It becomes a game as to which team can get their stand-up finished most efficiently.</p>

<p><strong>Gone</strong> are the awkward messages from clients explaining that they want that feature right now.</p>

<p><strong>Gone</strong> are micromanagers and in come Scrum Masters looking out for their development teams.</p>

<p><strong>Gone</strong> are &lsquo;code-monkey&rsquo; developers who wait patiently for orders before dutifully producing code in a caffeine-fuelled stupor.</p>

<p><strong>Gone</strong> are the 2 year development cycles that inevitably end in failure.</p>

<h2>But it&rsquo;s hard.</h2>

<p>Yeah. Nothing I can do about that. You&rsquo;ll have to decide if its worth it for you. These are based on my experiences and they are by no means representative of the rest of developer-kind.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In praise of getting shit done.]]></title>
    <link href="http://maxehmookau.github.io/blog/2014/02/14/in-praise-of-getting-shit-done/"/>
    <updated>2014-02-14T21:18:00+00:00</updated>
    <id>http://maxehmookau.github.io/blog/2014/02/14/in-praise-of-getting-shit-done</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve learnt a lot about myself in the last 18 months, both personally and professionally. This post is just about one of those things: <strong>I&rsquo;m impatient.</strong></p>

<p>Got a good idea? <strong>Go and do it.</strong> Please, please, <strong>please</strong> don&rsquo;t create a focus group, send our a survey, sit on the idea for 6 weeks, get a load of opinions, create a solid business plan, find a market fit or any of that shit. <strong>JUST DO IT!</strong> But be prepared to fail. (It&rsquo;s allowed).</p>

<p>That stuff is important. But not yet. Currently all you have is yourself, an idea and an early retirement plan if it all goes well. It&rsquo;s worth nothing. So stop thinking outside the box, formulating a plan, conceptualising, projecting and even planning.</p>

<h3><strong>Just go and get some shit done.</strong></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Age is largely irrelevant.]]></title>
    <link href="http://maxehmookau.github.io/blog/2014/01/28/age-is-largely-irrelevant/"/>
    <updated>2014-01-28T20:33:00+00:00</updated>
    <id>http://maxehmookau.github.io/blog/2014/01/28/age-is-largely-irrelevant</id>
    <content type="html"><![CDATA[<p><strong>I&rsquo;ve lost count how many times over the last 12 months that I&rsquo;ve been told how it&rsquo;s done by people younger than me.</strong></p>

<p>I&rsquo;m 22. So not old by any stretch of the imagination. I met a young lady (@thisisneena) at the NHS Hack Weekend in Cardiff last week. Members of the NHS come with problems they want solving and coders solve them. She came with her father (a surgeon), an idea, a strong vision and an early-stage prototype she&rsquo;d coded herself. She didn&rsquo;t worry herself about how it could be commercialised, whether someone was going to steal her idea or even the concept of a minimum viable product.</p>

<p>She did the four things that stand between an idea and execution:</p>

<ol>
<li>She found something she was interested in.</li>
<li>Found a problem.</li>
<li>Learnt the skills needed to fix it.</li>
<li>Just got on and <strong>solved the problem!</strong>
Her end goal was <a href="http://www.theguardian.com/society/2013/sep/18/nhs-records-system-10bn">not to make a bucket of money</a> or tie the NHS in to some contract that meant she could retire at 17 on a beach somewhere. The end goal was to make people&rsquo;s lives better.</li>
</ol>


<p><img src="http://farm4.staticflickr.com/3695/12156135794_fcff83375b.jpg" alt="Me, @thisisneena and her father presenting ClEWS at #nhshd" /></p>

<p>With age brings experience, but don&rsquo;t let that overshadow all of the things that youth brings to the table. Excitement, enthusiasm, naivity (yes, it&rsquo;s a good thing in moderation), positivity and the overriding feeling of coding because it&rsquo;s fun!
With age also comes cynicism, the need to provide for ones family and to pay the bills. <strong>That&rsquo;s not neccessarily a bad thing</strong> (those who know me will attest to my overflowing levels of cynicism for one so young.) but we mustn&rsquo;t forget the long nights spent coding because our ICT teacher didn&rsquo;t know enough to teach us anything at school or the first time we put a website on geocities for the world to see and the excitement that brought us. (Unless it was just me?)</p>

<p>Remember, these kids are smart. <strong>Really</strong> smart. If you see a young coder who&rsquo;s learning, offer them work experience, offer to teach them a skill or invite them to a tech meetup. <strong>Just get them involved.</strong> They&rsquo;ll thank you for it.</p>

<p>(Picture credits: <a href="http://twitter.com/paul_clarke">@paul_clarke</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things I did not learn during my degree vs Things I did learn during my degree]]></title>
    <link href="http://maxehmookau.github.io/blog/2013/12/02/things-i-did-not-learn-during-my-degree-vs-things-i-did-learn-during-my-degree/"/>
    <updated>2013-12-02T19:09:00+00:00</updated>
    <id>http://maxehmookau.github.io/blog/2013/12/02/things-i-did-not-learn-during-my-degree-vs-things-i-did-learn-during-my-degree</id>
    <content type="html"><![CDATA[<p>Having only graduated in July 2012, my degree is still relatively fresh in my head. I studied Music Informatics at the University of Sussex. Though it turned out to be basically a Computer Science degree with a slight musical slant since it turned out I was better at coding than playing the piano. I&rsquo;m now a full-time software developer and I truly enjoy what I do, however, many (if not the majority) of the skills I use day-to-day were not directly taught to me during my degree. Here&rsquo;s a list of the things I use day to day that <strong>I did not learn as a direct result of my studies.</strong></p>

<h2>Did not learn</h2>

<ul>
<li>Version control using Git.</li>
<li>Test-driven development.</li>
<li>Testing at all, except for 30 minutes on how to use JUnit.</li>
<li>Any sort of full-stack web framework. (Rails, Django, etc.)</li>
<li>Collaborative working using Git and GitHub (or similar).</li>
<li>Deployment strategies.</li>
<li>Any sort of server administration.</li>
<li>Use of a tool such as Redmine or JIRA.</li>
<li>Anything to do with Agile. (Scrum, Kanban, etc.)</li>
</ul>


<p>Let&rsquo;s contrast that with a list of the things I did learn.</p>

<h2>Did learn</h2>

<ul>
<li>XSLT, DTDs, AJAX (not using jQuery)</li>
<li>MATLAB</li>
<li>Java</li>
<li>Subversion</li>
<li>Waterfall methods</li>
<li>OpenCV</li>
<li>Machine Learning</li>
</ul>


<p>See where I&rsquo;m going with this? Yeah, there&rsquo;s a couple of cool things on that list. Computer vision is awesome, but I learnt <em>so</em> few of the tools and techniques I use day-to-day. Knowing Git, TDD and being familar with some sort of Agile methodology is pretty much assumed these days, but in three years and after £10,000, I did not know them.</p>

<p>I took a module in my final year called &lsquo;Web Computing&rsquo;. I expected to learn about web frameworks, web apps, stuff that would be <em>useful</em> if I wanted to go in to a career in what I would describe as web computing. First lecture:</p>

<blockquote><p>Be aware that this course does not cover PHP, Rails, or anything like that&hellip;</p></blockquote>

<p>I remember that quote. <em>&ldquo;&hellip;or anything like that&rdquo;</em>, like full-stack frameworks were somehow a waste of time. That module covered XSLT, DTDs, XML, that sort of thing. I learnt very little in that course other than the fact that I did not enjoy it. If an API provides XML instead of JSON I shudder now. But JSON was not even mentioned. Just to remind you, this module was taken in 2011/2012. <strong>This is not a long time ago.</strong> Seems to me that if Universities are tasked with preparing students with the skills required of them by industry, in my experience, the university failed.</p>

<p>I don&rsquo;t mean to be totally negative about my university experience. I enjoyed myself, made some friends, discovered some hobbies and I&rsquo;d do it all again. But in terms of my university experience preparing me for the workplace, I remain to be convinced that my student loan was worth it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Can adults learn to code?]]></title>
    <link href="http://maxehmookau.github.io/blog/2013/11/22/can-adults-learn-to-code/"/>
    <updated>2013-11-22T18:06:00+00:00</updated>
    <id>http://maxehmookau.github.io/blog/2013/11/22/can-adults-learn-to-code</id>
    <content type="html"><![CDATA[<p><strong>tl,dr</strong> Yes.</p>

<p>Since becoming more involved with getting kids in to coding recently, I&rsquo;ve heard the phrase <em>&ldquo;Year 8 is too late!&rdquo;</em> quite a lot and before this week, I would&rsquo;ve agreed, mostly. It&rsquo;s harder to learn new skills when you&rsquo;re older, it&rsquo;s a well-known fact. There&rsquo;s a theory of &lsquo;<a href="http://faculty.washington.edu/chudler/plast.html">brain plasticity</a>&rsquo; which suggests that children&rsquo;s brains are much more able to learn new things than adults. Who am I to argue with scientists? <strong>But what I experienced earlier this week was truly remarkable.</strong></p>

<h2>First, some context&hellip;</h2>

<p>I was asked by <a href="http://cyfle.co.uk">Cyfle</a> (pronounced <em>&lsquo;cuh-fluh&rsquo;</em>, not <em>&lsquo;siffle&rsquo;</em> as I embarassingly found out) to run a 2 day course called <em>&lsquo;Building an iOS App from Start to Finish&rsquo;</em>. The course would be open to the general public and participants would have <em>zero</em> programming knowledge, although they all knew that they would be learning to code. So although they had no knowledge, they were all willing and eager to learn! (It&rsquo;s also worth noting that over half of the participants were bilingual.)</p>

<p>I&rsquo;ll admit to being skeptical. If you&rsquo;re teaching adults with zero programming ability to write an iOS application, chances are you&rsquo;re thinking you might teach some simple HTML/JS framework which produces something that looks a bit like a native app. The honest truth is that <strong>my javascript skills SUCK</strong>. Big time. I can get by, but there&rsquo;s no way I&rsquo;m in any position to teach anyone anything. At this point, I have two choices.</p>

<ol>
<li>I can turn down the work. I don&rsquo;t want to do this.</li>
<li>Teach complete programming novices how to code in Objective-C.</li>
</ol>


<p><img src="http://img.pandawhale.com/41359-bear-how-about-no-sOUR.jpeg" alt="Oh hell no." /></p>

<p>Teach complete novices to code in Objective-C?! Seriously? I must be mad. So I gave it some thought. Before I got started, or even accepted the work, I had to decide if it was even possible to make this a success. The big questions that needed answering were:</p>

<ol>
<li>Why do experienced developers shy away from learning Objective-C? Are they things that we can overcome?</li>
<li>Am I going to look like an idiot?</li>
</ol>


<p>So, <strong>question 1</strong>.</p>

<h2>Why <em>do</em> experienced developers shy away from learning Objective-C?</h2>

<p>Well that&rsquo;s quite simple really&hellip;</p>

<h3>It&rsquo;s hard!</h3>

<p>I can&rsquo;t overstate that enough. That said, I have to think about <em>why</em> it&rsquo;s so hard. What makes it hard? I think a great majority of it&rsquo;s perceived difficulty is due to how syntacticly unfamilar it is to experienced developers despite being a very idiomatic object-orientated programming language. This isn&rsquo;t something that complete novices will have to compete with. This will be their <em>only</em> exposure to programming in their lives so far. They don&rsquo;t know languages that you and me might consider &lsquo;easier&rsquo; such as Ruby or Python even exist. I think we can overcome this.</p>

<h2>Am I going to look like an idiot?</h2>

<h3>Maybe. Maybe not.</h3>

<p>But there&rsquo;s only one way to find out&hellip;</p>

<p>In case you hadn&rsquo;t figured it out yet, I agreed to run the course. It would be an interesting experience whatever the outcome.</p>

<h2>Day 1</h2>

<p>Having arrived and met my participants, I quickly set to find out about them. I had 8 adults between the ages of 30-55(ish) (and all older than me, yes), none of whom had ever coded before but all were comfortably computer literate. They all worked for companies and charities who are looking to build an app or find out whether or not an app is right for them and they all wanted to have a taster of the programming side of things. <strong>Great!</strong> I had planned for exactly what I got, so no complaints so far.</p>

<p>We jumped head first in to some classic OO programming concepts. Classes, objects, instance variables&hellip; the usual stuff. I figured this would be a good place to start. We had a break and then I fired out the question:</p>

<blockquote><p>What is an object?</p></blockquote>

<p>Which was followed almost instantly by the response:</p>

<blockquote><p>An instance of a class.</p></blockquote>

<p>This had to be a good sign. I felt like this dude.</p>

<p><img src="http://www.reactiongifs.com/wp-content/uploads/2013/06/Colbert-High-Five.gif" alt="OH HELLS YES" /></p>

<p>I had 8 people who were confident with the theory behind (admittedly, the basics) of object-orientated programming. Next, we started to code. The <em>command-line application</em> template in XCode 4.2 was excellent. We could write some simple statements and get the computer outputting stuff to the screen. We started with the basics:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Hello, world!&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Oh, wow. We just told the computer to do something, and it did it.</strong> No big deal. Except that it was. This was the first successful program that these people had written. So what&rsquo;s next? <strong>Do it three times.</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Hello, world!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Hello, world!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Hello, world!&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next? Refactor in to a <strong>variable</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">message</span> <span class="o">=</span> <span class="s">@&quot;Hello, world!&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We carried on like this for the rest of the day. Tiny, tiny, iterations of our program. Which slowly got steadily more and more complex. By the end of the day they had <em>all</em> produced something like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="kt">int</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">number</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">number</span> <span class="o">&lt;=</span> <span class="mi">10</span> <span class="o">&amp;&amp;</span> <span class="n">number</span> <span class="o">*</span> <span class="n">number</span> <span class="o">==</span> <span class="mi">9</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Congratulations, you found the correct number.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and other examples that made use of <code>for</code> loops, <code>NSDictionary</code> and <code>NSArray</code>. Even better, we even got time to discuss mutability and how it works in this context.</p>

<h3>At this point, I&rsquo;m pretty stoked.</h3>

<p>These guys are really getting it. Let&rsquo;s make an app. It won&rsquo;t be a difficult, but just a small app that increases a number on the screen if you press one button, and decreases if you press another. We set up our XCode project, I showed them how to code one button and asked if they could get on and code the other. The majority of them did with very little input. The ones that did struggle were with syntactic issues and not a failure in understanding the underlying concepts. <em>Syntactic fluency in programming comes with practice. So I&rsquo;m not too worried about that.</em></p>

<p>As time passed the participants went from strength to strength with 6 of the 8 people who started the course completing it with a fully working calculator application. I may not have scientifically disproved that &ldquo;year 8 is too late&rdquo;, but it&rsquo;s certainly not as much as a certainty as we had assumed. From now on, when I hear people say &ldquo;I&rsquo;m too old to learn to code.&rdquo; I&rsquo;ll be more willing to argue with them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Those who can't do...]]></title>
    <link href="http://maxehmookau.github.io/blog/2013/09/22/those-who-cant-do/"/>
    <updated>2013-09-22T12:57:00+01:00</updated>
    <id>http://maxehmookau.github.io/blog/2013/09/22/those-who-cant-do</id>
    <content type="html"><![CDATA[<p><em>This is an old blog post I started writing about a month ago but never got a chance to finish it. I&rsquo;m not sure I agree with everything I&rsquo;ve said in it but will post it here and hopefully build on it at a later date.</em></p>

<blockquote><p>Those who can&rsquo;t do, teach. Those who can&rsquo;t teach, teach P.E.</p></blockquote>

<p>Not that I ever agreed with this statement (the first half of it anyway; I had some pretty dire P.E. teachers), but when put in the context of programming, never has a more untrue phrase been uttered. When I refer to programming in this post, I&rsquo;m talking about the process of solving a problem by writing code, not software development in its wider context.</p>

<p>My previous two posts have been comments/rants on the state of education and some school&rsquo;s totally inability to teach children how to program. This post seeks to actually provide some constructive ideas on what could be done about it by looking at how programming can be &lsquo;taught&rsquo;. Ask any Computer Science undergraduate <em>&ldquo;How did you get in to programming?&rdquo;</em>, and I guarantee that a tiny, tiny, minority will say <em>&ldquo;I learnt x language at school&rdquo;</em>. Those that do say that, will even more rarely have come from a comprehensive school background.</p>

<p>It&rsquo;s all very well to say we&rsquo;re going to address this, but &lsquo;coding&rsquo; isn&rsquo;t one skill that can be taught. It&rsquo;s a combination of skills ranging from critical thinking, problem solving and sometimes just a bit of dumb luck. Let&rsquo;s assume that we have a class of children, all of whom are fairly bright and posess good problem solving skills and all have an active interest in learning to code. <em>I realise this is a massive assumption, but you have to start somewhere, right?</em> <strong>What next?</strong></p>

<p>Starting from nothing, it&rsquo;s often very tempting to dive in to &lsquo;scripting&rsquo;. In other words, writing a set of commands in any language, executed one after another to achieve a task, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="n">x</span> <span class="o">+</span> <span class="mi">100</span>
</span><span class='line'><span class="n">output</span> <span class="n">x</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">110</span>
</span></code></pre></td></tr></table></div></figure>


<p>Do line 1, line 2, line 3, get line 4&hellip;. etc.
This is the easiest type of coding to teach and the easiest to learn, despite this type of code being used almost <strong>never in practice</strong>. Unless you&rsquo;re an über-hipster writing all your code in some snazzy functional languauge, the majority of code these days is written in Object-Orientated Languages (OO) such as Java, Ruby, Objective-C and sometimes PHP.
I spent a lot of time at university discussing the pros and cons of teaching OOP to university-age students <em>first</em> instead of teaching them to script first and we largely agreed that using an &lsquo;objects first&rsquo; approach was generally a good thing, especially for the 18+ age group. Although this conclusion wasn&rsquo;t reached by all people in this group. I however, saw no reason why this should not be extended to younger kids. Explain coding to them as a way of expressing &lsquo;things&rsquo; as code, and you might be on to something.</p>

<p>Explain that we can create templates, take a car for example. All cars have a set of attributes, these attributes are the same, but their values are often different. Cars can also all do the same set of things: open the boot, get spray painted, go forward, but how they do it depends on their individual attributes.</p>

<figure class='code'><figcaption><span>A Car in pseudocode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Car</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">make</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">model</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">colour</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">no_of_doors</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">function</span> <span class="n">paint</span><span class="p">(</span><span class="n">new_colour</span><span class="p">)</span>
</span><span class='line'>        <span class="n">colour</span> <span class="o">=</span> <span class="n">new_colour</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Using a Car in pseudocode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">car</span> <span class="o">=</span> <span class="kp">new</span> <span class="no">Car</span>
</span><span class='line'><span class="n">car</span><span class="o">.</span><span class="n">make</span> <span class="o">=</span> <span class="s1">&#39;Nissan&#39;</span>
</span><span class='line'><span class="n">car</span><span class="o">.</span><span class="n">model</span> <span class="o">=</span> <span class="s1">&#39;Note&#39;</span>
</span><span class='line'><span class="n">car</span><span class="o">.</span><span class="n">colour</span> <span class="o">=</span> <span class="s1">&#39;Blue&#39;</span>
</span><span class='line'><span class="n">car</span><span class="o">.</span><span class="n">no_of_doors</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'><span class="n">car</span><span class="o">.</span><span class="n">paint</span><span class="p">(</span><span class="s1">&#39;Orange&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">car</span><span class="o">.</span><span class="n">colour</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s1">&#39;Orange&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This may all seem very obvious, but to someone just learning how to program, this is a <strong>totally different thought process</strong> than the first example of &lsquo;scripting&rsquo;. You cannot expect someone who has grasped the ideas in the first example to automatically be able to understand the ideas presented in the second and third. However, those are the skills that are really used day-to-day by most programmers. So why would we teach kids anything else?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[These kids are crazy smart...]]></title>
    <link href="http://maxehmookau.github.io/blog/2013/08/13/these-kids-are-crazy-smart-dot-dot-dot/"/>
    <updated>2013-08-13T21:42:00+01:00</updated>
    <id>http://maxehmookau.github.io/blog/2013/08/13/these-kids-are-crazy-smart-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>I just spent a week as a Young Rewired State mentor at work. We hosted 20 kids between the age of 8-17 in a week of code which culminated in the weekend Festival of Code in which the best projects won prizes!</p>

<h2><strong>It was awesome!</strong></h2>

<p>Properly, properly awesome. I met children literally half my age who <del>had the potential</del> were already better coders than me. These kids are obviously missing skills neccessary to make it in a commercial software development environment, but that&rsquo;s hardly a failing at the age of 11.</p>

<h3>Day 1</h3>

<p>So Monday morning came, Day 1 of Young Rewired State. We were expecting 20 kids of varying ages to turn up. We had no idea of their skills, ability or interests. Needless to say, we were nervous. But within five minutes, my nerves had turned to excitement. We had formed four teams with four different and exciting projects. This was going to be a good week!</p>

<h3>Day 2</h3>

<p>Tuesday. Monday had taken it out of me. I slept for 10 hours. Suddenly my respect for teachers had quadrupled overnight.
One of our projects, Growify, a hardware hack for monitoring the health of plants was making great strides. I had, entirely selfishly, convinced the kids that Rails was the way forwards; mainly because I could teach them how to use it rather than stare blankly at anything Javascript based.</p>

<p>We also had an incident involving too much Coca Cola and a spinning chair. I&rsquo;ll say no more.</p>

<h3>Day 3</h3>

<p>We banned sugar/caffeine today. Water only. Was a good move.</p>

<p>One of our other projects, Lighthouse, which would help position ambulances near the positions of potential crashes based on previous crash data, was making good progress. They were asking me for help on things I didn&rsquo;t fully understand. Neither did they, but they were giving it their best shot.
This team also just implemented a collaborative workflow using git. They are teenagers! My mind was blown.</p>

<p>Oh, there was also an incident involving a hamster. Again, I&rsquo;ll say no more.</p>

<h3>Day 4</h3>

<p>Only mild panic despite the fact that the teams had to finish their hacks today. Everyone was on target, optimism was filling the building. We were certain of at least one project in the finals! Tomorrow was Birmingham and everything had to be perfect.</p>

<h3>Day 5</h3>

<p>The trip to Birmingham. I have never herded 20 children on and off two trains before. I intend never to do it again (until next year). But the constant fear of possibly losing our smallest member between the <em>train and the platform edge</em> was definitely on my mind. We had arrived though and the evening promised to be full of pizza and interesting talks. I was on supervision duty. I had a pizza so I was ok with that.</p>

<p>Finally saw someone give a talk on git that was aimed at kids. Spot on. Easily the quote of the weekend.</p>

<blockquote><p>git status is your BFF.</p></blockquote>

<h3>Day 6</h3>

<p>Stayed in a hotel. Not on the floor of Millennium Point. <strong>+1</strong>. Got back to YRS to have one of the kids bound up to me:</p>

<blockquote><p>I&rsquo;ve had no sleep. AND. A double espresso.</p></blockquote>

<p>This was obviously going to be a good day. The afternoon came and all of our kids gave their presentations in the heats. I was so very proud of all of them. They all did the best they possibly could have done and it paid off.</p>

<h3>Day 7</h3>

<p>The results! One of our projects was awards a special mention and another one had an honorary mention in the Best Code category. Slightly disappointed not to have won, but the kids seemed pleased.</p>

<p>I think we&rsquo;ll be back next year YRS.</p>

<h3>So what?</h3>

<p>Personally, I learnt a lot. Firstly, that these kids are crazy smart. And that there is a lot of them that clearly aren&rsquo;t getting the education they deserve from their schools. Their teachers can&rsquo;t help them code because they don&rsquo;t know how to code themselves. Amazing as YRS was (and I hope they carry on!), it&rsquo;s almost a shame that it has to exist. The skills that these kids learnt during the week shouldn&rsquo;t be provided by me or other mentors like me. The education system should provide it. YRS should be as well as a proper education in programming and computational thinking not instead of as is so often the case.</p>

<p>Also, I learnt that I don&rsquo;t want kids yet. They&rsquo;re hard work. You&rsquo;re welcome mum.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Let's Teach Kids to Code!]]></title>
    <link href="http://maxehmookau.github.io/blog/2013/07/12/im-a-geek-now/"/>
    <updated>2013-07-12T18:11:00+01:00</updated>
    <id>http://maxehmookau.github.io/blog/2013/07/12/im-a-geek-now</id>
    <content type="html"><![CDATA[<p>All of a sudden, programming is trendy. Politicians, teachers and industry all want kids to learn to code. All I can say is <strong>YAY!</strong></p>

<p>So you&rsquo;re a teacher with a semi-interest in computers and therefore you should be leading the charge by teaching kids to code. Again <strong>YAY!</strong> except, errrr&hellip; you don&rsquo;t know how to code, do you? Ok, first move, buy 30 Raspberry Pis. Surely it&rsquo;s easy&hellip; Nope, wrong again!</p>

<p>Ok, step back. You need to think this through. Your intentions may be good, but if you&rsquo;re not teaching it right, is it worth doing? I would argue, probably not. Not yet anyway! We don&rsquo;t let people that aren&rsquo;t good at things impart their (non-existant) knowledge to people looking for the knowledge, that seems obvious.</p>

<p>Quite rightly, teachers need a degree in the subject that they teach at secondary level. Out of 27,000 teachers that graduated in 2010, three had a computer science degree. <strong>THREE!!!</strong> So what makes the rest of them qualified to teach programming? In my experience, to teach something you can&rsquo;t simply be ok at a topic, you have to understand it at its most basic level so that you can fend off any questions and explain any concepts to the most inquistive of minds. That&rsquo;s what makes the difference between a good teacher and a great teacher.</p>

<p><strong>I don&rsquo;t believe we can just take our stock of ICT teachers and make them coders to the level where they are comfortable teaching it.</strong> This is the real issue.</p>

<p>ICT is computer literacy. This is important but it has <strong>very little place in our schools!</strong> Many, many children gain this literacy all day, everyday. <strong>Software is intuative! We don&rsquo;t need to teach children to use Microsoft Word, we need to teach children <em>why</em> Microsoft Word is easy to use and why they just instinctively know how to use it.</strong> We need teachers that know their classes from their functions and their abstract classes from their loops. Programmers are grown in their bedrooms now, not at school. If technology is the future, we need to fix this!</p>

<p>I&rsquo;ve had the pleasure of working with children of all ages (8-18) recently and let me tell you. These kids are smart. In some cases, they&rsquo;re smarter than the teachers! I showed a group of 18 year olds Ruby on Rails this week. We built a blog in 10 minutes. They was an audible gasp around the room when they begun to understand the power of the tools they&rsquo;re <strong>not being taught to use at school.</strong></p>

<p>I know the reason kids aren&rsquo;t learning code isn&rsquo;t out of political malice, it&rsquo;s partly down to lack of funding (isn&rsquo;t everything?) and most importantly a lack of understanding of the importance of these skills by those who set the curriculums. I bet Michael Gove can&rsquo;t code, he just gets someone else to make his software. It&rsquo;s excellent to see strides being made in Wales recently, I just hope it continues.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Chunky Coder's Guide to Losing Weight]]></title>
    <link href="http://maxehmookau.github.io/blog/2013/06/17/the-chunky-coders-guide-to-losing-weight/"/>
    <updated>2013-06-17T21:18:00+01:00</updated>
    <id>http://maxehmookau.github.io/blog/2013/06/17/the-chunky-coders-guide-to-losing-weight</id>
    <content type="html"><![CDATA[<h3>Some background&hellip;</h3>

<p>During my three years of being a Computer Science student, I got fat. Like, properly fat. I blame it on a poor diet, no exercise and being a lazy bastard. Mostly because it was my poor diet, lack of exercise and general laziness than caused my BMI to increase from 22 (ideal) to 30 (obese). (I&rsquo;m 5&#8221; 10&#8217;)</p>

<p>I&rsquo;d like to say I spent <em>ages</em> trying to lower my weight because I was aware of the issue. However, that would be a blatent lie. I was partially aware of my increasing weight, but also totally unaware how bad it was getting. Besides, your time at uni is the only time where you can justifiably get fat just because students are lazy and eat lots of pizza. (I should point out, I worked my arse off at uni, just not physically. Most of my work required me to be sat down and eat a lot of junk food.)</p>

<p><strong>I graduated last July with a 2:1 and a weight of 96kg.</strong> This was both excellent (the former) and pretty horriffic (the latter). But obviously, it was my last summer before I became a fully paid-up member of society. So, a couple more months of pigging out was in order. And so it was.
<img src="http://25.media.tumblr.com/03ead7afc3322d30bcd502dab64072de/tumblr_mgsi05jPqW1rairjso1_1280.gif" alt="" /></p>

<p>Then I got a job. And I felt grown up. And I couldn&rsquo;t walk up the stairs without getting out of breath. And bits of me wobbled that shouldn&rsquo;t wobble.
<em>But fuck I <strong>hate</strong> exercise.</em> There are <em>so</em> many other things I could do with the hour it would take me to go on a run. Plus, I was too slow to actually burn any calories. It&rsquo;d be quicker just to starve myself. HA. That&rsquo;s not gonna happen. So I guess I&rsquo;ll just carry on the way I am.</p>

<p>I&rsquo;m wasn&rsquo;t like those super-morbidly obese people you see on telly. &ldquo;I&rsquo;m fine&rdquo;, I thought to myself. In all honesty, I was. It was a bit of extra weight, it certainly wasn&rsquo;t going to kill me.</p>

<p>But then the weight continued to increase. Eventually I realised I needed to do something about it.</p>

<h3>So what did I do?!</h3>

<p>I always wanted to work in software development. That career that requires you to remain seated for 7.5 hours a day, 5 days a week and usually commands the same of you during spare time. It&rsquo;s not exactly condusive to losing weight. After a long day of work, the <em>last</em> thing you want to do is go on a run. I didn&rsquo;t want to go on a run anyway.</p>

<p>My mind is obsessive. It gets obsessed with things I enjoy, quickly. It&rsquo;s a personality that is natually attracted to software development because it&rsquo;s a skill that requires an incredible amount of concentration. Coders like order, right and wrong answers. Losing weight is not, I thought, something that I can apply to my usual <em>&ldquo;do this, get this result&rdquo;</em> way of thinking.</p>

<p><strong>Oh, how wrong I was.</strong></p>

<p>Firstly, nothing I&rsquo;m going to tell you here is magic. It&rsquo;s all horribly common sense. I&rsquo;m not going to write a Ruby gem with a hipster name like <em>fatty</em> that allows you to rig an arduino in to your stomach to remove excess fat. All whilst playing you a selection of cat gifs. But I will impart knowledge on to you that I have found useful.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Fatty</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">make_me</span><span class="p">:</span> <span class="ss">:thin</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Pick ONE exercise</h4>

<p>Geeks (you and me) like to be experts in things. It&rsquo;s no good doing something unless you can become <em>really</em> good at it, right? I&rsquo;m not guaranteeing you&rsquo;ll be the best at whatever exercise you pick, but it&rsquo;s easier to be an expert in one thing than several things. So pick one.</p>

<p>Take your time, you need to stick with it for at least a year. So try a few out.</p>

<ul>
<li><strong>Join a gym</strong>. It wasn&rsquo;t for me personally. But it cost me £20 and a few hours of my time to figure out that I didn&rsquo;t enjoy gyms.</li>
<li><strong>Try swimming</strong>. You&rsquo;ll find the water supports your weight, but you have to work harder to notice the difference.</li>
<li><strong>Go running</strong>. (Pick me!) You&rsquo;ll lose weight fast and there&rsquo;s a natural progression.</li>
</ul>


<h4>Surround yourself with people who enjoy exercise</h4>

<p>It&rsquo;s easier than you think.</p>

<ul>
<li>My partner&rsquo;s mother runs marathons for fun.</li>
<li>There are several runners in my place of work.</li>
<li>My previously overweight father took up running.</li>
<li>&hellip;as did my sister.</li>
</ul>


<p>These people are your motivation. Well, people similar to this anyway. You may think all of your friends are all fat slobs. (If that&rsquo;s the case, get some new friends).
I now have spirited conversations about running with various people</p>

<h4>Now go and do it</h4>

<p>I chose running. I&rsquo;ve not lived in Cardiff very long and I don&rsquo;t know the area well except for my immediate location and the area around where I work. Running gave me a great opportunity to explore a new area.</p>

<p>I know you want to become the best runner ever, because that&rsquo;s what you do, <em>become an expert in EVERYTHING</em>. <strong>Tough shit.</strong></p>

<p>Getting to 5k is hard. But worth it. It&rsquo;ll take you 2 months or so, slowly building up the time. Find yourself a &lsquo;Couch to 5k&rsquo; plan and stick to it religiously. There&rsquo;s hundreds out there, each with varying level of annoying pep talks in the background. I prefer my voiceovers quick and to the point. But there&rsquo;s plenty that will encourage you every 2 minutes to carry on because &lsquo;you&rsquo;re doing great&rsquo;. I was finding it hard to believe after I was told how well I was doing, whilst on the floor in pain. I wanted to call the voice in my ears a liar, but didn&rsquo;t want to appear insane.</p>

<h3>BUY ALL THE TECHNOLOGY!</h3>

<p>Gadgets make exercise fun. Get yourself an app that tracks you location, speed, time, maps your route. Get a proper pedometer. Get an app that tracks the calories you eat. Honestly, it&rsquo;s great fun. (No sarcasm, seriously.)
Also, by a pair of running shoes. Get gait analysis. It&rsquo;s yet more cool gadgets to play with. You love gadgets right?</p>

<h4>It&rsquo;s a system. Duh.</h4>

<p>Diets suck. But I found treating my body as a system worked well for my brain.</p>

<p>So if we make the <em>very</em> broad assumption that the number of calories your body hasn&rsquo;t burned at the end of a day gets stored as fat in your body then the fewer calories you eat, the less you will weigh after a while.
Let me spell it out to you in a way you&rsquo;ll understand.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">DAILY_CALS</span> <span class="o">=</span> <span class="mi">2500</span>
</span><span class='line'><span class="k">if</span> <span class="n">todays_calories</span> <span class="o">==</span> <span class="no">DAILY_CALS</span>
</span><span class='line'>  <span class="n">do_nothing</span><span class="p">()</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great, so if I eat 2500 calories. I&rsquo;ll stay roughly the same weight. Yup.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">todays_calories</span> <span class="o">&gt;</span> <span class="no">DAILY_CALS</span>
</span><span class='line'>  <span class="n">store_excess_as_fat</span><span class="p">()</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">store_excess_as_fat</span>
</span><span class='line'>  <span class="n">put_on_weight</span><span class="p">()</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if I eat too much, I&rsquo;ll put on weight? Yup.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">todays_calories</span> <span class="o">&lt;</span> <span class="no">DAILY_CALS</span>
</span><span class='line'>  <span class="n">burn_stored_fat_for_energy</span><span class="p">()</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">burn_stored_fat_for_energy</span>
</span><span class='line'>  <span class="n">lose_weight</span><span class="p">()</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>OH. And if I eat less than 2500 a day, I&rsquo;ll lose weight. Yeah.</p>

<p>I know, I know, it&rsquo;s obvious. And you&rsquo;ve heard it all before. <strong>But it&rsquo;s <em>REALLY</em> important</strong>. But your body is a system. It&rsquo;s more black and white than you previously thought. It&rsquo;s not even about the kinds of foods you eat. Nutritionists and dieticians can piss off. Eat all the chocolate you like as far as I care, just don&rsquo;t eat anything else once you hit 2500 calories that day. You&rsquo;ll feel like shit though, so don&rsquo;t do that.</p>

<h4>What now?</h4>

<p>Stick with it. I can honestly say I started actually losing weight at Christmas last year. It&rsquo;s been a <em>slow</em> process but steady. My BMI is now 27.1 down from 30. My weight loss has been slow, but consistant. I&rsquo;ve not had to make any major adjustments to my lifestyle. Just a bit less chocolate and a bit more running.
<img src="https://trendweight.com/u/dfe8f9a337484c/chart/6m.png" alt="" />
Use something like Trendweight to track your weight too. It filters outliers and only shows your general trend. So if you have a fat day, it won&rsquo;t totally demoralise you.</p>

<p>If you&rsquo;re a software developer who&rsquo;s doing the same thing as me and trying desperate to lose weight. Don&rsquo;t lose heart. You&rsquo;ll get there. But I <strong>really</strong> miss dominos pizza.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tywin Lannister Quote]]></title>
    <link href="http://maxehmookau.github.io/blog/2013/06/15/tywin-lannister-quote/"/>
    <updated>2013-06-15T09:28:00+01:00</updated>
    <id>http://maxehmookau.github.io/blog/2013/06/15/tywin-lannister-quote</id>
    <content type="html"><![CDATA[<p>A nice quote by Tywin Lannister taken from <em>A Storm of Sword</em> book.</p>

<blockquote><p>The greatest fools are ofttimes more clever then the men who laugh at them.</p><footer><strong>Tywin Lannister</strong> <cite>A Storm of Swords</cite></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is Web Scraping Ethical?]]></title>
    <link href="http://maxehmookau.github.io/blog/2013/05/27/is-web-scraping-ethical/"/>
    <updated>2013-05-27T11:18:00+01:00</updated>
    <id>http://maxehmookau.github.io/blog/2013/05/27/is-web-scraping-ethical</id>
    <content type="html"><![CDATA[<p>Last week I released the UkBuses Ruby Gem. It scrapes real-time data from the Traveline site and allows developers to use the data returned as a Hash.  It quickly became the second most weekly starred Ruby repo on GitHub and sparked some interesting debate on Hacker News. There&rsquo;s strong feelings on both sides of the debate but basically no legal precident on the subject. After debating it with friends and collegues, it&rsquo;s clear that nobody really knows. First of all, let&rsquo;s make the question up for debate very clear:</p>

<p><strong>Should it be OK, both legally and morally, for someone to download the HTML output of a <em>non-authenticated</em> webpage and convert it to a format that makes it more easily usable for <em>non-commercial purposes</em>?</strong></p>

<p>There&rsquo;s two important parts to the question that I have posed:</p>

<ol>
<li><p><em>non-authenticated</em> &ndash; In other words, assume that any data to be scraped will respond to a non-authenticated HTTP request and that a typical end-user for that data has not needed to enter any sort of credentials. (OAuth, HTTP Basic or anything!)</p></li>
<li><p><em>non-commercial</em> &ndash; The use of the data scraped should not ultimately be for the generation of revenue; profitable or not.</p></li>
</ol>


<p>My personal belief is that if either of the two previous conditions have been violated then there are <em>serious</em> ethical concerns that need addressing. In the case of the UKBuses gem, the data conforms to both of those conditions, <em>although there is nothing to stop someone from using the gem for commercial means.</em></p>

<p>So here&rsquo;s the arguments that have been put to me and my responses to them. I don&rsquo;t claim to have the right answers and simply seek to spark debate on the subject.</p>

<hr />

<h2>Against</h2>

<blockquote><p>&ldquo;[Company] has paid money to aggregate the data. Why do you have the right to take the data and make it available for free?&rdquo;</p></blockquote>

<p>This is the strongest argument I have heard so far, effectively comparing data scraping to theft making it both illegal and immoral. However, I would only agree with this if the company who held the data made an attempt to restrict access to it by use of a paywall or other authentication. Since we have already agreed that in such cases, scraping <em>would</em> be immoral (and probably illegal.)</p>

<p>However, in the case of the real-time UK bus data, the data is aggregated for the <em>sole</em> purpose of making that data available to the general public at bus stops and on the Traveline website. Therefore, one can only assume that no money has been lost that would otherwise have been made. So in this case, I would propose a counter question:</p>

<blockquote><p>&ldquo;Although [company] has paid money to aggregate the data. Since the data is used on a daily basis by members of the general public, why wouldn&rsquo;t I have the right to make the data available in other formats?&rdquo;</p></blockquote>

<hr />

<h2>For</h2>

<blockquote><p>&ldquo;By heavily restricing access to the data and providing no public API, [company] effectively shields itself from public accontability.&rdquo;</p></blockquote>

<p>Public transport in the UK often gets a bad time in the press for being late. Justifiably. The UK has one of the least punctual and <a href="http://www.businessinsider.com/most-expensive-public-transit-networks-2012-9?op=1">most expensive</a> public transport systems in the world. Yet, despite central government&rsquo;s push to open up more data, the privately owned public transport companies have bucked this trend making real-time data nearly impossible to get hold of.</p>

<p>It is, unfortunately, the transport companies themselves that participate in mutual back-slapping of a job well done when they themselves produce reports in to their punctuality. My old local train company claimed 90% in the last month that I used their services. As an admittedly unscientific sample, I would love to know how they got to that figure. <strong>There was a point where I could organise my day by the very fact that my train from Bournville to Birmingham New Street would be 4 minutes late.</strong></p>

<p>But I digress. The point is that open data creates accountability. I would love to see someone use the UKBuses gem to aggregate data as to how late buses are and see if it matches up with the figures given by the companies themselves.</p>

<p>Central and local government in the UK is opening up more and more data because they have realised that it creates accountability. I would argue that where there is a strong public interest (I hate that phrase.), certain companies should be compelled to open such data. Public transport should fall in to that category.</p>

<p>Yes, I know that the data <em>is</em> technically available. As long as you fill out a lengthy form, comply with various rules and in some cases <em>provide a deposit</em> for any &lsquo;damages&rsquo; caused by whatever your application of the data happens to be. The documentation is in huge PDF files with lengthy examples for how to retrieve the data. This is <strong>boring</strong> and stifles innovation. Coders like data streams to play around with, it&rsquo;s part of the fun of coding. Companies with a strong interest in the general public should understand this and embrace it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running iOS Unit Tests Automatically Using OCUnit and xctool]]></title>
    <link href="http://maxehmookau.github.io/blog/2013/05/06/running-ios-unit-tests-automatically-using-ocunit-and-xctool/"/>
    <updated>2013-05-06T15:19:00+01:00</updated>
    <id>http://maxehmookau.github.io/blog/2013/05/06/running-ios-unit-tests-automatically-using-ocunit-and-xctool</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/facebook/xctool">xctool</a> is a new command line tool from Facebook which it claims makes running XCode tests much simpler. <strong>I agree.</strong> Up until now, Apple have still not given developers a simple way to automate running tests at the command line which makes testing a pain and makes continuous integration even more of a pain. It&rsquo;s not impossible, but it&rsquo;s not as simple as it should be.</p>

<p>xctool is a replacement for <code>xcodebuild</code> with a few extra handy features. I&rsquo;m going to show you how to add this to your iOS/OSX project to greatly increase productivity and make testing more fun!</p>

<p>You&rsquo;ll need the following before we get started:</p>

<ul>
<li>Ruby 1.9.3</li>
<li>Bundler</li>
</ul>


<p>Yeah, you heard me. <em>Ruby</em>. We can use the <code>guard</code> gem to watch to changes to our project and then fire off a build in the command line. It&rsquo;s as simple as that. Firstly, we need to create a <code>Gemfile</code> in the root of our project.</p>

<pre><code>$ cd /root/of/xcode/project
$ touch Gemfile
</code></pre>

<p>Open up the <code>Gemfile</code> and add the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">source</span> <span class="o">:</span><span class="n">rubygems</span>
</span><span class='line'><span class="n">gem</span> <span class="err">&#39;</span><span class="n">guard</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="err">&#39;</span><span class="n">guard</span><span class="o">-</span><span class="n">shell</span><span class="err">&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="err">&#39;</span><span class="n">fsevent</span><span class="err">&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mf">0.9</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>At the command line, run:</p>

<pre><code>$ bundle install
</code></pre>

<p>This grabs our needed gems and their dependencies. Now we&rsquo;re ready for business.</p>

<p>With <code>guard</code> installed, run <code>guard init shell</code> at the command line. This will create a sample <code>Guardfile</code> to get us started. The <code>Guardfile</code> lists what files to watch for changes and what actions to take when changes are detected.</p>

<p>Open up the <code>Guardfile</code> and add the following lines, I&rsquo;ll run through what they do in a minute:</p>

<figure class='code'><figcaption><span>Guardfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">guard</span> <span class="s1">&#39;shell&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">/(.*).(m|h|mm|hh)/</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Change detected. Running tests...&quot;</span>
</span><span class='line'>    <span class="sb">`../xctool/xctool.sh -project ProjectName.xcodeproj -scheme SchemeName test -reporter plain`</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Line 1: <code>guard 'shell' do</code> tells guard to use the <code>shell</code> plugin we included in our <code>Gemfile</code>.</p>

<p>Line 2: This line watches our source files for changes. XCode includes lots of files, many of which change a lot and we don&rsquo;t want to run our tests everytime those files change. (You might want to, I&rsquo;m assuming you don&rsquo;t.) This is just a regular expression which looks at <em>any</em> file that ends with .h, .m, .hh, or .mm (for you Objective-C++ users out there.)</p>

<p>Lines 3 and 4 alert the user that a file has changed, and line 4 runs <code>xctool</code>. You&rsquo;ll need to change where your <code>xctool</code> is. I keep mine in the root folder of all my personal projects, I tried building a binary and adding it to <code>/usr/bin</code> but I was unable to get it working. You have to pass <code>xctool</code> the project file along with the scheme you want to build. That&rsquo;s all there is to it!</p>

<p>Go to the root of your project and run:</p>

<pre><code>$ guard
</code></pre>

<p>and you&rsquo;re all set. Try opening your XCode project and making a change to a file. Then just watch your command line automatically run all of the tests in your project. No more clicking in XCode, clever huh?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting to grips with Core Data]]></title>
    <link href="http://maxehmookau.github.io/blog/2013/05/04/getting-to-grips-with-core-data/"/>
    <updated>2013-05-04T18:11:00+01:00</updated>
    <id>http://maxehmookau.github.io/blog/2013/05/04/getting-to-grips-with-core-data</id>
    <content type="html"><![CDATA[<p>Most iOS developers will agree, <em>Core Data is <strong>hard</strong></em>. The majority (myself included) will wimp out and go and use SQLite, key-value stores in iCloud or just avoid data persistence all together. But I thought I would finally get over the mental block I had over Core Data and just learn how it works.</p>

<p>I&rsquo;m far from an expert at this point, I&rsquo;ve had 2 days to get my head around the basics and so far I&rsquo;m impressed. Here&rsquo;s what I&rsquo;ve learnt, hopefully it may be useful.</p>

<ul>
<li><strong>Core Data is NOT an ORM</strong>.</li>
</ul>


<p>Admittedly, it&rsquo;s pretty close and it functions a lot like an ORM. But technically, it is a <em>object graph management framework</em>. If you expect to behave exactly like an ORM, you&rsquo;re most likely going to be disappointed. There&rsquo;s no ActiveRecord-style <code>Post.all</code> method to just yank out all records of a certain class.
It differs from an ORM because of its strengths. It is able to deal with potentially <em>huge</em> graphs of related entities with only a limited amount of memory as is often found on mobile devices. (Though less so with the iPhone these days&hellip;) It does this by &lsquo;faulting&rsquo; data in and out of memory. Let me give you an example:
Say we have two entities: <code>Organisation</code> and <code>Person</code>. When retrieving a list of <code>Organisation</code> objects, Core Data will retrieve the list in to memory. It is possible to retrieve the list of <code>People</code> objects in an <code>Organisation</code> <em>even though</em> those people are not actually in memory yet. Core Data <em>&lsquo;faults&rsquo;</em> and retrieves the list of objects in the stated relation, loading only what is needed in to memory at any one time. This approach is <strong>awesome</strong> for low-memory devices.</p>

<ul>
<li><strong>Core Data isn&rsquo;t <em>just</em> an SQLite database</strong></li>
</ul>


<p>Yes, Core Data does use SQLite as its backing storage and in debug mode, you can see the raw SQL statements performed on the database, but don&rsquo;t be fooled, this is simply an implementation detail. The schema may change, unlike the Core Data API. Open up the database and take a look; on large object graphs, it may not look as you expect. Core Data saves the data however it thinks is most efficient, it&rsquo;s not designed for human-readability at the database level.</p>

<ul>
<li><strong>XCode does a lot of the hard-work for you</strong></li>
</ul>


<p>There&rsquo;s a lot of boilerplate code to set up a Core Data stack. But XCode handles this for you, just tick the &lsquo;<strong>Use Core Data</strong>&rsquo; box in XCode and you won&rsquo;t need to worry too much about it. It creates a <strong>Persistant Object Store</strong>, <strong>Managed Object Model</strong> and all that gubbins in your <code>AppDelegate.m</code> file so you can access it à la:</p>

<figure class='code'><figcaption><span>Get hold of a ManagedObjectContext from your AppDelegate</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="c1">// At the top of your ViewController</span>
</span><span class='line'><span class="cp">#import &quot;AppDelegate.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// When the ViewController is initialised...</span>
</span><span class='line'><span class="n">AppDelegate</span> <span class="o">*</span><span class="n">appDelegate</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="n">delegate</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">appDelegate</span> <span class="n">managedObjectContext</span><span class="p">];</span>
</span><span class='line'><span class="c1">// Assigning your AppDelegate in the first step removes the need for casting.</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Core Data and iCloud don&rsquo;t appear to play nice, yet</strong></li>
</ul>


<p>There have been numerous blog posts about how iCloud doesn&rsquo;t <em>&lsquo;just work&rsquo;</em> like Apple promised it would. Developers were hoping for Core Data stores just to be synced across devices without any problem, apparently that hasn&rsquo;t happened. iOS 7 may answer some of those issues, but we will have to wait and see.</p>

<p>I&rsquo;m still learning a lot about Core Data and there is much left to learn.</p>
]]></content>
  </entry>
  
</feed>
