<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code | Max Woolf - Software Developer]]></title>
  <link href="http://maxehmookau.github.io/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://maxehmookau.github.io/"/>
  <updated>2014-04-28T22:20:28+01:00</updated>
  <id>http://maxehmookau.github.io/</id>
  <author>
    <name><![CDATA[Max Woolf ]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The graduate software developers' reading list]]></title>
    <link href="http://maxehmookau.github.io/blog/2014/04/28/the-graduate-software-developers-reading-lis/"/>
    <updated>2014-04-28T21:48:00+01:00</updated>
    <id>http://maxehmookau.github.io/blog/2014/04/28/the-graduate-software-developers-reading-lis</id>
    <content type="html"><![CDATA[<p>I started my first proper software development job at nearly 2 years ago now and I have done one thing more than anything else:</p>

<p><strong>READ.</strong></p>

<p>I&rsquo;ve read books on development, code, business, agile, psychology and just being a better person. Some of the books were useless. Some were excellent and some I wish I had read while I was at university. Here&rsquo;s a list of the books I&rsquo;ve read in the last 2 years on relevant subjects with a few words on the ones that stood out.</p>

<ul>
<li><p><strong><a href="http://www.amazon.co.uk/gp/product/0192803158/ref=oh_details_o01_s00_i00?ie=UTF8&amp;psc=1">Cryptography &ndash; A very short introduction.</a></strong> &ndash; A really <em>really</em> short introduction to how cryptography works. Loads of tech every day uses cryptography and most developers just take its functionality for granted. Knowing, even just a little bit, about the theory can set you apart.</p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/1781571406/ref=oh_details_o02_s00_i00?ie=UTF8&amp;psc=1">The iPhone App Design Manual: Create Perfect Designs for Effortless Coding and App Store Success</a></p></li>
<li><p><strong><a href="http://www.amazon.co.uk/gp/product/0091954673/ref=oh_details_o06_s00_i00?ie=UTF8&amp;psc=1">Remote: Office Not Required</a></strong> &ndash; A relatively new book from the makers of Basecamp. If you&rsquo;re not familiar with them, their founder created the Ruby on Rails framework and their books are excellent. This book is about how software companies can work effectively even if they&rsquo;re distributed around the globe.</p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/099134460X/ref=oh_details_o08_s00_i00?ie=UTF8&amp;psc=1">ng-book &ndash; The Complete Book on AngularJS</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/1449356265/ref=oh_details_o03_s00_i00?ie=UTF8&amp;psc=1">Graph Databases</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B007Y6KDTG/ref=oh_d__o05_details_o05__i00?ie=UTF8&amp;psc=1">Programming in Go: Creating Applications for the 21st Century</a></p></li>
<li><p><strong><a href="http://www.amazon.co.uk/gp/product/B0026OR3JO/ref=oh_d__o05_details_o05__i00?ie=UTF8&amp;psc=1">The Ruby Programming Language</a></strong> &ndash; A must-read for all Ruby developers. It goes in to the detail of how Ruby works under the hood and shows some lesser-known tricks.</p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B005R2O8Y0/ref=oh_d__o06_details_o06__i00?ie=UTF8&amp;psc=1">12 Essential Skills for Software Architects</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B008HUMTO0/ref=oh_d__o09_details_o09__i00?ie=UTF8&amp;psc=1">Effective Programming: More Than Writing Code</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B00DCWOI5G/ref=oh_d__o00_details_o00__i00?ie=UTF8&amp;psc=1">Developing Backbone.js Applications</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B005MJFA2W/ref=oh_d__o01_details_o01__i00?ie=UTF8&amp;psc=1">Thinking, Fast and Slow</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B008EKF87S/ref=oh_d__o02_details_o02__i00?ie=UTF8&amp;psc=1">Team Geek: A Software Developer&rsquo;s Guide to Working Well with Others</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B003XDUCEU/ref=oh_d__o08_details_o08__i00?ie=UTF8&amp;psc=1">Being Geek: The Software Developer&rsquo;s Career Handbook</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B007RNK0W6/ref=oh_d__o09_details_o09__i00?ie=UTF8&amp;psc=1">Test-Driven iOS Development</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B00AYQNR5U/ref=oh_d__o05_details_o05__i00?ie=UTF8&amp;psc=1">The Passionate Programmer: Creating a Remarkable Career in Software Development</a></p></li>
<li><p><strong><a href="http://www.amazon.co.uk/gp/product/B003ELY7PG/ref=oh_d__o07_details_o07__i00?ie=UTF8&amp;psc=1">ReWork: Change the Way You Work Forever</a></strong> &ndash; I hate this book. But only because it&rsquo;s so wonderful and I&rsquo;m jealous of the people who wrote it. This is <em>the</em> book for small software development companies. It cuts through all the crap so often found in software development companies. Meetings are toxic. ASAP is poison. Underdo the competition. Planning is guessing. If you read only one book on this list, make it this.</p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B000SEGEKI/ref=oh_d__o08_details_o08__i00?ie=UTF8&amp;psc=1">The Pragmatic Programmer: From Journeyman to Master</a></p></li>
<li><p><strong><a href="http://www.amazon.co.uk/gp/product/B004O0U74Q/ref=oh_d__o03_details_o03__i00?ie=UTF8&amp;psc=1">The Elements of Scrum</a></strong> &ndash; You won&rsquo;t learn this stuff at uni, but you should really know it. Scrum is a method of developing software as a team and loads of development teams use it. Learn the rules. This book is a really quick read which goes over what is expected of team members.</p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B007P5N8D4/ref=oh_d__o04_details_o04__i00?ie=UTF8&amp;psc=1">Scrum: a Breathtakingly Brief and Agile Introduction</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B004JLMDOM/ref=oh_d__o02_details_o02__i00?ie=UTF8&amp;psc=1">Ruby on Rails 3 Tutorial: Learn Rails by Example (Addison-Wesley Professional Ruby Series)</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B0054YNKYU/ref=oh_d__o03_details_o03__i00?ie=UTF8&amp;psc=1">Core Data for iOS: Developing Data-Driven Applications for the iPad, iPhone, and iPod touch </a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B003T0G9FS/ref=oh_d__o06_details_o06__i00?ie=UTF8&amp;psc=1">Letting Everything Become Your Teacher: 100 Lessons in Mindfulness</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B006ZZQHME/ref=oh_d__o07_details_o07__i00?ie=UTF8&amp;psc=1">Inside Apple</a></p></li>
<li><p><a href="http://www.amazon.co.uk/gp/product/B0068183EA/ref=oh_d__o01_details_o01__i00?ie=UTF8&amp;psc=1">How to Teach Quantum Physics to Your Dog</a></p></li>
</ul>


<p>I&rsquo;ll be adding to this list over the next few days. Let me know which books you&rsquo;ve found most useful in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Can adults learn to code?]]></title>
    <link href="http://maxehmookau.github.io/blog/2013/11/22/can-adults-learn-to-code/"/>
    <updated>2013-11-22T18:06:00+00:00</updated>
    <id>http://maxehmookau.github.io/blog/2013/11/22/can-adults-learn-to-code</id>
    <content type="html"><![CDATA[<p><strong>tl,dr</strong> Yes.</p>

<p>Since becoming more involved with getting kids in to coding recently, I&rsquo;ve heard the phrase <em>&ldquo;Year 8 is too late!&rdquo;</em> quite a lot and before this week, I would&rsquo;ve agreed, mostly. It&rsquo;s harder to learn new skills when you&rsquo;re older, it&rsquo;s a well-known fact. There&rsquo;s a theory of &lsquo;<a href="http://faculty.washington.edu/chudler/plast.html">brain plasticity</a>&rsquo; which suggests that children&rsquo;s brains are much more able to learn new things than adults. Who am I to argue with scientists? <strong>But what I experienced earlier this week was truly remarkable.</strong></p>

<h2>First, some context&hellip;</h2>

<p>I was asked by <a href="http://cyfle.co.uk">Cyfle</a> (pronounced <em>&lsquo;cuh-fluh&rsquo;</em>, not <em>&lsquo;siffle&rsquo;</em> as I embarassingly found out) to run a 2 day course called <em>&lsquo;Building an iOS App from Start to Finish&rsquo;</em>. The course would be open to the general public and participants would have <em>zero</em> programming knowledge, although they all knew that they would be learning to code. So although they had no knowledge, they were all willing and eager to learn! (It&rsquo;s also worth noting that over half of the participants were bilingual.)</p>

<p>I&rsquo;ll admit to being skeptical. If you&rsquo;re teaching adults with zero programming ability to write an iOS application, chances are you&rsquo;re thinking you might teach some simple HTML/JS framework which produces something that looks a bit like a native app. The honest truth is that <strong>my javascript skills SUCK</strong>. Big time. I can get by, but there&rsquo;s no way I&rsquo;m in any position to teach anyone anything. At this point, I have two choices.</p>

<ol>
<li>I can turn down the work. I don&rsquo;t want to do this.</li>
<li>Teach complete programming novices how to code in Objective-C.</li>
</ol>


<p><img src="http://img.pandawhale.com/41359-bear-how-about-no-sOUR.jpeg" alt="Oh hell no." /></p>

<p>Teach complete novices to code in Objective-C?! Seriously? I must be mad. So I gave it some thought. Before I got started, or even accepted the work, I had to decide if it was even possible to make this a success. The big questions that needed answering were:</p>

<ol>
<li>Why do experienced developers shy away from learning Objective-C? Are they things that we can overcome?</li>
<li>Am I going to look like an idiot?</li>
</ol>


<p>So, <strong>question 1</strong>.</p>

<h2>Why <em>do</em> experienced developers shy away from learning Objective-C?</h2>

<p>Well that&rsquo;s quite simple really&hellip;</p>

<h3>It&rsquo;s hard!</h3>

<p>I can&rsquo;t overstate that enough. That said, I have to think about <em>why</em> it&rsquo;s so hard. What makes it hard? I think a great majority of it&rsquo;s perceived difficulty is due to how syntacticly unfamilar it is to experienced developers despite being a very idiomatic object-orientated programming language. This isn&rsquo;t something that complete novices will have to compete with. This will be their <em>only</em> exposure to programming in their lives so far. They don&rsquo;t know languages that you and me might consider &lsquo;easier&rsquo; such as Ruby or Python even exist. I think we can overcome this.</p>

<h2>Am I going to look like an idiot?</h2>

<h3>Maybe. Maybe not.</h3>

<p>But there&rsquo;s only one way to find out&hellip;</p>

<p>In case you hadn&rsquo;t figured it out yet, I agreed to run the course. It would be an interesting experience whatever the outcome.</p>

<h2>Day 1</h2>

<p>Having arrived and met my participants, I quickly set to find out about them. I had 8 adults between the ages of 30-55(ish) (and all older than me, yes), none of whom had ever coded before but all were comfortably computer literate. They all worked for companies and charities who are looking to build an app or find out whether or not an app is right for them and they all wanted to have a taster of the programming side of things. <strong>Great!</strong> I had planned for exactly what I got, so no complaints so far.</p>

<p>We jumped head first in to some classic OO programming concepts. Classes, objects, instance variables&hellip; the usual stuff. I figured this would be a good place to start. We had a break and then I fired out the question:</p>

<blockquote><p>What is an object?</p></blockquote>

<p>Which was followed almost instantly by the response:</p>

<blockquote><p>An instance of a class.</p></blockquote>

<p>This had to be a good sign. I felt like this dude.</p>

<p><img src="http://www.reactiongifs.com/wp-content/uploads/2013/06/Colbert-High-Five.gif" alt="OH HELLS YES" /></p>

<p>I had 8 people who were confident with the theory behind (admittedly, the basics) of object-orientated programming. Next, we started to code. The <em>command-line application</em> template in XCode 4.2 was excellent. We could write some simple statements and get the computer outputting stuff to the screen. We started with the basics:</p>

<p><code>objective-c
NSLog(@"Hello, world!");
</code></p>

<p><strong>Oh, wow. We just told the computer to do something, and it did it.</strong> No big deal. Except that it was. This was the first successful program that these people had written. So what&rsquo;s next? <strong>Do it three times.</strong></p>

<p><code>objective-c
NSLog(@"Hello, world!");
NSLog(@"Hello, world!");
NSLog(@"Hello, world!");
</code></p>

<p>Next? Refactor in to a <strong>variable</strong>:</p>

<p><code>objective-c
NSString *message = @"Hello, world!";
NSLog(message);
NSLog(message);
NSLog(message);
</code></p>

<p>We carried on like this for the rest of the day. Tiny, tiny, iterations of our program. Which slowly got steadily more and more complex. By the end of the day they had <em>all</em> produced something like this.</p>

<p>```objective-c
int number = 3;</p>

<p>if (number >= 0 &amp;&amp; number &lt;= 10 &amp;&amp; number * number == 9)
{</p>

<pre><code>NSLog(@"Congratulations, you found the correct number.");
</code></pre>

<p>}
```</p>

<p>and other examples that made use of <code>for</code> loops, <code>NSDictionary</code> and <code>NSArray</code>. Even better, we even got time to discuss mutability and how it works in this context.</p>

<h3>At this point, I&rsquo;m pretty stoked.</h3>

<p>These guys are really getting it. Let&rsquo;s make an app. It won&rsquo;t be a difficult, but just a small app that increases a number on the screen if you press one button, and decreases if you press another. We set up our XCode project, I showed them how to code one button and asked if they could get on and code the other. The majority of them did with very little input. The ones that did struggle were with syntactic issues and not a failure in understanding the underlying concepts. <em>Syntactic fluency in programming comes with practice. So I&rsquo;m not too worried about that.</em></p>

<p>As time passed the participants went from strength to strength with 6 of the 8 people who started the course completing it with a fully working calculator application. I may not have scientifically disproved that &ldquo;year 8 is too late&rdquo;, but it&rsquo;s certainly not as much as a certainty as we had assumed. From now on, when I hear people say &ldquo;I&rsquo;m too old to learn to code.&rdquo; I&rsquo;ll be more willing to argue with them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[These kids are crazy smart...]]></title>
    <link href="http://maxehmookau.github.io/blog/2013/08/13/these-kids-are-crazy-smart-dot-dot-dot/"/>
    <updated>2013-08-13T21:42:00+01:00</updated>
    <id>http://maxehmookau.github.io/blog/2013/08/13/these-kids-are-crazy-smart-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>I just spent a week as a Young Rewired State mentor at work. We hosted 20 kids between the age of 8-17 in a week of code which culminated in the weekend Festival of Code in which the best projects won prizes!</p>

<h2><strong>It was awesome!</strong></h2>

<p>Properly, properly awesome. I met children literally half my age who <del>had the potential</del> were already better coders than me. These kids are obviously missing skills neccessary to make it in a commercial software development environment, but that&rsquo;s hardly a failing at the age of 11.</p>

<h3>Day 1</h3>

<p>So Monday morning came, Day 1 of Young Rewired State. We were expecting 20 kids of varying ages to turn up. We had no idea of their skills, ability or interests. Needless to say, we were nervous. But within five minutes, my nerves had turned to excitement. We had formed four teams with four different and exciting projects. This was going to be a good week!</p>

<h3>Day 2</h3>

<p>Tuesday. Monday had taken it out of me. I slept for 10 hours. Suddenly my respect for teachers had quadrupled overnight.
One of our projects, Growify, a hardware hack for monitoring the health of plants was making great strides. I had, entirely selfishly, convinced the kids that Rails was the way forwards; mainly because I could teach them how to use it rather than stare blankly at anything Javascript based.</p>

<p>We also had an incident involving too much Coca Cola and a spinning chair. I&rsquo;ll say no more.</p>

<h3>Day 3</h3>

<p>We banned sugar/caffeine today. Water only. Was a good move.</p>

<p>One of our other projects, Lighthouse, which would help position ambulances near the positions of potential crashes based on previous crash data, was making good progress. They were asking me for help on things I didn&rsquo;t fully understand. Neither did they, but they were giving it their best shot.
This team also just implemented a collaborative workflow using git. They are teenagers! My mind was blown.</p>

<p>Oh, there was also an incident involving a hamster. Again, I&rsquo;ll say no more.</p>

<h3>Day 4</h3>

<p>Only mild panic despite the fact that the teams had to finish their hacks today. Everyone was on target, optimism was filling the building. We were certain of at least one project in the finals! Tomorrow was Birmingham and everything had to be perfect.</p>

<h3>Day 5</h3>

<p>The trip to Birmingham. I have never herded 20 children on and off two trains before. I intend never to do it again (until next year). But the constant fear of possibly losing our smallest member between the <em>train and the platform edge</em> was definitely on my mind. We had arrived though and the evening promised to be full of pizza and interesting talks. I was on supervision duty. I had a pizza so I was ok with that.</p>

<p>Finally saw someone give a talk on git that was aimed at kids. Spot on. Easily the quote of the weekend.</p>

<blockquote><p>git status is your BFF.</p></blockquote>

<h3>Day 6</h3>

<p>Stayed in a hotel. Not on the floor of Millennium Point. <strong>+1</strong>. Got back to YRS to have one of the kids bound up to me:</p>

<blockquote><p>I&rsquo;ve had no sleep. AND. A double espresso.</p></blockquote>

<p>This was obviously going to be a good day. The afternoon came and all of our kids gave their presentations in the heats. I was so very proud of all of them. They all did the best they possibly could have done and it paid off.</p>

<h3>Day 7</h3>

<p>The results! One of our projects was awards a special mention and another one had an honorary mention in the Best Code category. Slightly disappointed not to have won, but the kids seemed pleased.</p>

<p>I think we&rsquo;ll be back next year YRS.</p>

<h3>So what?</h3>

<p>Personally, I learnt a lot. Firstly, that these kids are crazy smart. And that there is a lot of them that clearly aren&rsquo;t getting the education they deserve from their schools. Their teachers can&rsquo;t help them code because they don&rsquo;t know how to code themselves. Amazing as YRS was (and I hope they carry on!), it&rsquo;s almost a shame that it has to exist. The skills that these kids learnt during the week shouldn&rsquo;t be provided by me or other mentors like me. The education system should provide it. YRS should be as well as a proper education in programming and computational thinking not instead of as is so often the case.</p>

<p>Also, I learnt that I don&rsquo;t want kids yet. They&rsquo;re hard work. You&rsquo;re welcome mum.</p>
]]></content>
  </entry>
  
</feed>
