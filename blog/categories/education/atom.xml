<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: education | My Octopress Blog]]></title>
  <link href="http://maxehmookau.github.io/blog/categories/education/atom.xml" rel="self"/>
  <link href="http://maxehmookau.github.io/"/>
  <updated>2014-02-14T19:57:32+00:00</updated>
  <id>http://maxehmookau.github.io/</id>
  <author>
    <name><![CDATA[Max]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Age is largely irrelevant.]]></title>
    <link href="http://maxehmookau.github.io/blog/2014/01/28/age-is-largely-irrelevant/"/>
    <updated>2014-01-28T20:33:00+00:00</updated>
    <id>http://maxehmookau.github.io/blog/2014/01/28/age-is-largely-irrelevant</id>
    <content type="html"><![CDATA[<p><strong>I&rsquo;ve lost count how many times over the last 12 months that I&rsquo;ve been told how it&rsquo;s done by people younger than me.</strong></p>

<p>I&rsquo;m 22. So not old by any stretch of the imagination. I met a young lady (@thisisneena) at the NHS Hack Weekend in Cardiff last week. Members of the NHS come with problems they want solving and coders solve them. She came with her father (a surgeon), an idea, a strong vision and an early-stage prototype she&rsquo;d coded herself. She didn&rsquo;t worry herself about how it could be commercialised, whether someone was going to steal her idea or even the concept of a minimum viable product.</p>

<p>She did the four things that stand between an idea and execution:</p>

<ol>
<li>She found something she was interested in.</li>
<li>Found a problem.</li>
<li>Learnt the skills needed to fix it.</li>
<li>Just got on and <strong>solved the problem!</strong>
Her end goal was <a href="http://www.theguardian.com/society/2013/sep/18/nhs-records-system-10bn">not to make a bucket of money</a> or tie the NHS in to some contract that meant she could retire at 17 on a beach somewhere. The end goal was to make people&rsquo;s lives better.</li>
</ol>


<p><img src="http://farm4.staticflickr.com/3695/12156135794_fcff83375b.jpg" alt="Me, @thisisneena and her father presenting ClEWS at #nhshd" /></p>

<p>With age brings experience, but don&rsquo;t let that overshadow all of the things that youth brings to the table. Excitement, enthusiasm, naivity (yes, it&rsquo;s a good thing in moderation), positivity and the overriding feeling of coding because it&rsquo;s fun!
With age also comes cynicism, the need to provide for ones family and to pay the bills. <strong>That&rsquo;s not neccessarily a bad thing</strong> (those who know me will attest to my overflowing levels of cynicism for one so young.) but we mustn&rsquo;t forget the long nights spent coding because our ICT teacher didn&rsquo;t know enough to teach us anything at school or the first time we put a website on geocities for the world to see and the excitement that brought us. (Unless it was just me?)</p>

<p>Remember, these kids are smart. <strong>Really</strong> smart. If you see a young coder who&rsquo;s learning, offer them work experience, offer to teach them a skill or invite them to a tech meetup. <strong>Just get them involved.</strong> They&rsquo;ll thank you for it.</p>

<p>(Picture credits: <a href="http://twitter.com/paul_clarke">@paul_clarke</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things I did not learn during my degree vs Things I did learn during my degree]]></title>
    <link href="http://maxehmookau.github.io/blog/2013/12/02/things-i-did-not-learn-during-my-degree-vs-things-i-did-learn-during-my-degree/"/>
    <updated>2013-12-02T19:09:00+00:00</updated>
    <id>http://maxehmookau.github.io/blog/2013/12/02/things-i-did-not-learn-during-my-degree-vs-things-i-did-learn-during-my-degree</id>
    <content type="html"><![CDATA[<p>Having only graduated in July 2012, my degree is still relatively fresh in my head. I studied Music Informatics at the University of Sussex. Though it turned out to be basically a Computer Science degree with a slight musical slant since it turned out I was better at coding than playing the piano. I&rsquo;m now a full-time software developer and I truly enjoy what I do, however, many (if not the majority) of the skills I use day-to-day were not directly taught to me during my degree. Here&rsquo;s a list of the things I use day to day that <strong>I did not learn as a direct result of my studies.</strong></p>

<h2>Did not learn</h2>

<ul>
<li>Version control using Git.</li>
<li>Test-driven development.</li>
<li>Testing at all, except for 30 minutes on how to use JUnit.</li>
<li>Any sort of full-stack web framework. (Rails, Django, etc.)</li>
<li>Collaborative working using Git and GitHub (or similar).</li>
<li>Deployment strategies.</li>
<li>Any sort of server administration.</li>
<li>Use of a tool such as Redmine or JIRA.</li>
<li>Anything to do with Agile. (Scrum, Kanban, etc.)</li>
</ul>


<p>Let&rsquo;s contrast that with a list of the things I did learn.</p>

<h2>Did learn</h2>

<ul>
<li>XSLT, DTDs, AJAX (not using jQuery)</li>
<li>MATLAB</li>
<li>Java</li>
<li>Subversion</li>
<li>Waterfall methods</li>
<li>OpenCV</li>
<li>Machine Learning</li>
</ul>


<p>See where I&rsquo;m going with this? Yeah, there&rsquo;s a couple of cool things on that list. Computer vision is awesome, but I learnt <em>so</em> few of the tools and techniques I use day-to-day. Knowing Git, TDD and being familar with some sort of Agile methodology is pretty much assumed these days, but in three years and after Â£10,000, I did not know them.</p>

<p>I took a module in my final year called &lsquo;Web Computing&rsquo;. I expected to learn about web frameworks, web apps, stuff that would be <em>useful</em> if I wanted to go in to a career in what I would describe as web computing. First lecture:</p>

<blockquote><p>Be aware that this course does not cover PHP, Rails, or anything like that&hellip;</p></blockquote>

<p>I remember that quote. <em>&ldquo;&hellip;or anything like that&rdquo;</em>, like full-stack frameworks were somehow a waste of time. That module covered XSLT, DTDs, XML, that sort of thing. I learnt very little in that course other than the fact that I did not enjoy it. If an API provides XML instead of JSON I shudder now. But JSON was not even mentioned. Just to remind you, this module was taken in 2011/2012. <strong>This is not a long time ago.</strong> Seems to me that if Universities are tasked with preparing students with the skills required of them by industry, in my experience, the university failed.</p>

<p>I don&rsquo;t mean to be totally negative about my university experience. I enjoyed myself, made some friends, discovered some hobbies and I&rsquo;d do it all again. But in terms of my university experience preparing me for the workplace, I remain to be convinced that my student loan was worth it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Can adults learn to code?]]></title>
    <link href="http://maxehmookau.github.io/blog/2013/11/22/can-adults-learn-to-code/"/>
    <updated>2013-11-22T18:06:00+00:00</updated>
    <id>http://maxehmookau.github.io/blog/2013/11/22/can-adults-learn-to-code</id>
    <content type="html"><![CDATA[<p><strong>tl,dr</strong> Yes.</p>

<p>Since becoming more involved with getting kids in to coding recently, I&rsquo;ve heard the phrase <em>&ldquo;Year 8 is too late!&rdquo;</em> quite a lot and before this week, I would&rsquo;ve agreed, mostly. It&rsquo;s harder to learn new skills when you&rsquo;re older, it&rsquo;s a well-known fact. There&rsquo;s a theory of &lsquo;<a href="http://faculty.washington.edu/chudler/plast.html">brain plasticity</a>&rsquo; which suggests that children&rsquo;s brains are much more able to learn new things than adults. Who am I to argue with scientists? <strong>But what I experienced earlier this week was truly remarkable.</strong></p>

<h2>First, some context&hellip;</h2>

<p>I was asked by <a href="http://cyfle.co.uk">Cyfle</a> (pronounced <em>&lsquo;cuh-fluh&rsquo;</em>, not <em>&lsquo;siffle&rsquo;</em> as I embarassingly found out) to run a 2 day course called <em>&lsquo;Building an iOS App from Start to Finish&rsquo;</em>. The course would be open to the general public and participants would have <em>zero</em> programming knowledge, although they all knew that they would be learning to code. So although they had no knowledge, they were all willing and eager to learn! (It&rsquo;s also worth noting that over half of the participants were bilingual.)</p>

<p>I&rsquo;ll admit to being skeptical. If you&rsquo;re teaching adults with zero programming ability to write an iOS application, chances are you&rsquo;re thinking you might teach some simple HTML/JS framework which produces something that looks a bit like a native app. The honest truth is that <strong>my javascript skills SUCK</strong>. Big time. I can get by, but there&rsquo;s no way I&rsquo;m in any position to teach anyone anything. At this point, I have two choices.</p>

<ol>
<li>I can turn down the work. I don&rsquo;t want to do this.</li>
<li>Teach complete programming novices how to code in Objective-C.</li>
</ol>


<p><img src="http://img.pandawhale.com/41359-bear-how-about-no-sOUR.jpeg" alt="Oh hell no." /></p>

<p>Teach complete novices to code in Objective-C?! Seriously? I must be mad. So I gave it some thought. Before I got started, or even accepted the work, I had to decide if it was even possible to make this a success. The big questions that needed answering were:</p>

<ol>
<li>Why do experienced developers shy away from learning Objective-C? Are they things that we can overcome?</li>
<li>Am I going to look like an idiot?</li>
</ol>


<p>So, <strong>question 1</strong>.</p>

<h2>Why <em>do</em> experienced developers shy away from learning Objective-C?</h2>

<p>Well that&rsquo;s quite simple really&hellip;</p>

<h3>It&rsquo;s hard!</h3>

<p>I can&rsquo;t overstate that enough. That said, I have to think about <em>why</em> it&rsquo;s so hard. What makes it hard? I think a great majority of it&rsquo;s perceived difficulty is due to how syntacticly unfamilar it is to experienced developers despite being a very idiomatic object-orientated programming language. This isn&rsquo;t something that complete novices will have to compete with. This will be their <em>only</em> exposure to programming in their lives so far. They don&rsquo;t know languages that you and me might consider &lsquo;easier&rsquo; such as Ruby or Python even exist. I think we can overcome this.</p>

<h2>Am I going to look like an idiot?</h2>

<h3>Maybe. Maybe not.</h3>

<p>But there&rsquo;s only one way to find out&hellip;</p>

<p>In case you hadn&rsquo;t figured it out yet, I agreed to run the course. It would be an interesting experience whatever the outcome.</p>

<h2>Day 1</h2>

<p>Having arrived and met my participants, I quickly set to find out about them. I had 8 adults between the ages of 30-55(ish) (and all older than me, yes), none of whom had ever coded before but all were comfortably computer literate. They all worked for companies and charities who are looking to build an app or find out whether or not an app is right for them and they all wanted to have a taster of the programming side of things. <strong>Great!</strong> I had planned for exactly what I got, so no complaints so far.</p>

<p>We jumped head first in to some classic OO programming concepts. Classes, objects, instance variables&hellip; the usual stuff. I figured this would be a good place to start. We had a break and then I fired out the question:</p>

<blockquote><p>What is an object?</p></blockquote>

<p>Which was followed almost instantly by the response:</p>

<blockquote><p>An instance of a class.</p></blockquote>

<p>This had to be a good sign. I felt like this dude.</p>

<p><img src="http://www.reactiongifs.com/wp-content/uploads/2013/06/Colbert-High-Five.gif" alt="OH HELLS YES" /></p>

<p>I had 8 people who were confident with the theory behind (admittedly, the basics) of object-orientated programming. Next, we started to code. The <em>command-line application</em> template in XCode 4.2 was excellent. We could write some simple statements and get the computer outputting stuff to the screen. We started with the basics:</p>

<p><code>objective-c
NSLog(@"Hello, world!");
</code></p>

<p><strong>Oh, wow. We just told the computer to do something, and it did it.</strong> No big deal. Except that it was. This was the first successful program that these people had written. So what&rsquo;s next? <strong>Do it three times.</strong></p>

<p><code>objective-c
NSLog(@"Hello, world!");
NSLog(@"Hello, world!");
NSLog(@"Hello, world!");
</code></p>

<p>Next? Refactor in to a <strong>variable</strong>:</p>

<p><code>objective-c
NSString *message = @"Hello, world!";
NSLog(message);
NSLog(message);
NSLog(message);
</code></p>

<p>We carried on like this for the rest of the day. Tiny, tiny, iterations of our program. Which slowly got steadily more and more complex. By the end of the day they had <em>all</em> produced something like this.</p>

<p>```objective-c
int number = 3;</p>

<p>if (number >= 0 &amp;&amp; number &lt;= 10 &amp;&amp; number * number == 9)
{</p>

<pre><code>NSLog(@"Congratulations, you found the correct number.");
</code></pre>

<p>}
```</p>

<p>and other examples that made use of <code>for</code> loops, <code>NSDictionary</code> and <code>NSArray</code>. Even better, we even got time to discuss mutability and how it works in this context.</p>

<h3>At this point, I&rsquo;m pretty stoked.</h3>

<p>These guys are really getting it. Let&rsquo;s make an app. It won&rsquo;t be a difficult, but just a small app that increases a number on the screen if you press one button, and decreases if you press another. We set up our XCode project, I showed them how to code one button and asked if they could get on and code the other. The majority of them did with very little input. The ones that did struggle were with syntactic issues and not a failure in understanding the underlying concepts. <em>Syntactic fluency in programming comes with practice. So I&rsquo;m not too worried about that.</em></p>

<p>As time passed the participants went from strength to strength with 6 of the 8 people who started the course completing it with a fully working calculator application. I may not have scientifically disproved that &ldquo;year 8 is too late&rdquo;, but it&rsquo;s certainly not as much as a certainty as we had assumed. From now on, when I hear people say &ldquo;I&rsquo;m too old to learn to code.&rdquo; I&rsquo;ll be more willing to argue with them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Those who can't do...]]></title>
    <link href="http://maxehmookau.github.io/blog/2013/09/22/those-who-cant-do/"/>
    <updated>2013-09-22T12:57:00+01:00</updated>
    <id>http://maxehmookau.github.io/blog/2013/09/22/those-who-cant-do</id>
    <content type="html"><![CDATA[<p><em>This is an old blog post I started writing about a month ago but never got a chance to finish it. I&rsquo;m not sure I agree with everything I&rsquo;ve said in it but will post it here and hopefully build on it at a later date.</em></p>

<blockquote><p>Those who can&rsquo;t do, teach. Those who can&rsquo;t teach, teach P.E.</p></blockquote>

<p>Not that I ever agreed with this statement (the first half of it anyway; I had some pretty dire P.E. teachers), but when put in the context of programming, never has a more untrue phrase been uttered. When I refer to programming in this post, I&rsquo;m talking about the process of solving a problem by writing code, not software development in its wider context.</p>

<p>My previous two posts have been comments/rants on the state of education and some school&rsquo;s totally inability to teach children how to program. This post seeks to actually provide some constructive ideas on what could be done about it by looking at how programming can be &lsquo;taught&rsquo;. Ask any Computer Science undergraduate <em>&ldquo;How did you get in to programming?&rdquo;</em>, and I guarantee that a tiny, tiny, minority will say <em>&ldquo;I learnt x language at school&rdquo;</em>. Those that do say that, will even more rarely have come from a comprehensive school background.</p>

<p>It&rsquo;s all very well to say we&rsquo;re going to address this, but &lsquo;coding&rsquo; isn&rsquo;t one skill that can be taught. It&rsquo;s a combination of skills ranging from critical thinking, problem solving and sometimes just a bit of dumb luck. Let&rsquo;s assume that we have a class of children, all of whom are fairly bright and posess good problem solving skills and all have an active interest in learning to code. <em>I realise this is a massive assumption, but you have to start somewhere, right?</em> <strong>What next?</strong></p>

<p>Starting from nothing, it&rsquo;s often very tempting to dive in to &lsquo;scripting&rsquo;. In other words, writing a set of commands in any language, executed one after another to achieve a task, like this:</p>

<p>```ruby</p>

<pre><code>x = 10
x + 100
output x
=&gt; 110
</code></pre>

<p>```</p>

<p>Do line 1, line 2, line 3, get line 4&hellip;. etc.
This is the easiest type of coding to teach and the easiest to learn, despite this type of code being used almost <strong>never in practice</strong>. Unless you&rsquo;re an Ã¼ber-hipster writing all your code in some snazzy functional languauge, the majority of code these days is written in Object-Orientated Languages (OO) such as Java, Ruby, Objective-C and sometimes PHP.
I spent a lot of time at university discussing the pros and cons of teaching OOP to university-age students <em>first</em> instead of teaching them to script first and we largely agreed that using an &lsquo;objects first&rsquo; approach was generally a good thing, especially for the 18+ age group. Although this conclusion wasn&rsquo;t reached by all people in this group. I however, saw no reason why this should not be extended to younger kids. Explain coding to them as a way of expressing &lsquo;things&rsquo; as code, and you might be on to something.</p>

<p>Explain that we can create templates, take a car for example. All cars have a set of attributes, these attributes are the same, but their values are often different. Cars can also all do the same set of things: open the boot, get spray painted, go forward, but how they do it depends on their individual attributes.</p>

<p>```ruby A Car in pseudocode</p>

<pre><code>class Car
    var make
    var model
    var colour
    var no_of_doors

    function paint(new_colour)
        colour = new_colour
    end
end
</code></pre>

<p>```</p>

<p>```ruby Using a Car in pseudocode</p>

<pre><code>car = new Car
car.make = 'Nissan'
car.model = 'Note'
car.colour = 'Blue'
car.no_of_doors = 5
car.paint('Orange')
car.colour
=&gt; 'Orange'
</code></pre>

<p>```</p>

<p>This may all seem very obvious, but to someone just learning how to program, this is a <strong>totally different thought process</strong> than the first example of &lsquo;scripting&rsquo;. You cannot expect someone who has grasped the ideas in the first example to automatically be able to understand the ideas presented in the second and third. However, those are the skills that are really used day-to-day by most programmers. So why would we teach kids anything else?</p>
]]></content>
  </entry>
  
</feed>
