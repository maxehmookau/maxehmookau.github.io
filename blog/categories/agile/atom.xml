<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: agile | Max Woolf - Software Developer]]></title>
  <link href="http://maxehmookau.github.io/blog/categories/agile/atom.xml" rel="self"/>
  <link href="http://maxehmookau.github.io/"/>
  <updated>2014-08-11T13:26:14+01:00</updated>
  <id>http://maxehmookau.github.io/</id>
  <author>
    <name><![CDATA[Max Woolf ]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Moving from Agile Development to agile development]]></title>
    <link href="http://maxehmookau.github.io/blog/2014/07/02/moving-beyond-agile/"/>
    <updated>2014-07-02T12:57:00+01:00</updated>
    <id>http://maxehmookau.github.io/blog/2014/07/02/moving-beyond-agile</id>
    <content type="html"><![CDATA[<p>What am I talking about? I&rsquo;m talking about getting rid of &lsquo;Agile Development&rsquo;; certifications, rigid process, faux-flat company hierarchy and moving to agile development: near real-time communication, small feedback loops and empowerment of developers who are making software.</p>

<p>But I bet you&rsquo;re wondering:</p>

<blockquote><p>Why the sudden epiphany Max? Aren&rsquo;t you a big advocate of Scrum?</p></blockquote>

<p>Yeah, I was and still am to a certain extent, but I&rsquo;ve recently started a new job in a much smaller team and it&rsquo;s given me some perspective.</p>

<p>Scrum is good; great even. It still has a place amongst teams with little experience in developing software with agility. But it&rsquo;s not, and should not be the be all and end all of software development. It certainly isn&rsquo;t something that we should, as developers, aspire to as a long-term goal. It&rsquo;s a stepping stone to a better way of working and a very worthwhile one too. It&rsquo;s &lsquo;agile with training wheels&rsquo;. It quickly ingrains the principals of agile development in to its members. <strong>But we do not use training wheels forever</strong> and we definitely don&rsquo;t hand out certificates and praise to those who encourage it.  It starts to hold you back. We&rsquo;ve reached a bizarre paradox at this point. You want to go faster (be more agile), but you just can&rsquo;t because the rigid process (the stabilisers) is holding you back. You&rsquo;re ready to move on but you can&rsquo;t. The process is ingrained and beyond change.</p>

<p>As a result of this idea, why do we need ScrumMaster certifications or even the whole concept of a ScrumMaster. Not just because the name makes me cringe but because why do we want to encourage keeping the stabilisers attached? A true leader (or master if you insist) keeps the stabilisers attached for as little time as possible, empowering the people doing the work to do the best job they can and then slowly removes the stabilisers, encouraging the team to make mistakes and learn for themselves. The development team are probably smart people, you hired them after all. A bad leader says &ldquo;It&rsquo;s 11am. Time for a daily stand up because that&rsquo;s <em>what we always do</em>.&rdquo;</p>

<p>Convinced that Scrum might actually be holding you back? Ok, good. I&rsquo;m not a believer in trashing a decent concept unless there&rsquo;s a better one waiting to take its place. Like I said, that&rsquo;s small-a, agile development. To be a member of an agile development team you don&rsquo;t need a certificate, or even a fancy job title, you can be a manager if you want, team fascilitator, team leader, god of process, I don&rsquo;t care. Just make sure you do the following:</p>

<h2>Communicate</h2>

<p>All the time. Ask questions. Make sure everyone knows what everyone else is doing. Use a daily stand-up if you want. Or don&rsquo;t. <strong>Whatever works for your team.</strong></p>

<h2>Feedback to your customer <em>atleast</em> daily</h2>

<p>Two, three, four, five times daily. They&rsquo;re paying you to make something great but they run their business, they know what&rsquo;s best. They must know what you&rsquo;re doing so <strong>show them!</strong> Feedback can take many forms whether it be just a phone call to update them or a piece of shippable code so they can see a feature in progress. <strong>Whatever works for your team.</strong></p>

<h2>Spot issues early and resolve them quickly</h2>

<p>Use sprint retrospectives if you want but in my experience, once every two weeks isn&rsquo;t often enough. Problems come up unexpectedly, that&rsquo;s why they&rsquo;re called problems.  Got an issue with management? Talk to management. Got an issue with code quality? Talk to the developers. Got an issue with the client? Talk to the client.</p>

<p><em>What I&rsquo;ve described here is just a practical implementation of the Agile Manifesto, which is exactly what Scrum is but with less rigidity. My issue isn&rsquo;t with Scrum itself, but with its inability to change without no longer being &lsquo;Scrum&rsquo;.</em></p>

<p>The rest is up to your team. They&rsquo;re smart people. Empower them and they will, almost always, surprise you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why agile? It works. I think.]]></title>
    <link href="http://maxehmookau.github.io/blog/2014/03/03/why-agile-it-works-i-think/"/>
    <updated>2014-03-03T20:36:00+00:00</updated>
    <id>http://maxehmookau.github.io/blog/2014/03/03/why-agile-it-works-i-think</id>
    <content type="html"><![CDATA[<p>I recently discovered that &lsquo;agile&rsquo; (small A, big a, I don&rsquo;t care.) is more than just another bullet in your sales guy&rsquo;s buzzword bullshit bingo armoury. I always had my suspicions that there was something good there, now I&rsquo;ve had a go and I get it. So here&rsquo;s a few things that I have learned. (If you&rsquo;re already doing this, none of this will be new to you but I wanted to get them written down.)</p>

<h2>You don&rsquo;t <em>do</em> agile.</h2>

<p>Without sounding like the aformentioned sales guy, you can&rsquo;t <em>do</em> agile. You can <strong>be</strong> agile. Duh.</p>

<p>In other words, you can&rsquo;t follow a strict regiment of pre-planned rules and be agile. <em>Obviously.</em> You can, however, quickly react to change. Identify issues and solve them before they become a big problem.</p>

<p>Scrum is a set of pre-planned rules that facilitate being <em>more</em> agile. But it&rsquo;s not the be all and end all. Your team will probably outgrow Scrum as they find what makes them more productive. I&rsquo;ve heard it described as &ldquo;agile with training wheels&rdquo;. I agree.</p>

<h2>People are <strong>really</strong> bad at estimating</h2>

<p>Utterly, utterly awful. <a href="http://programmers.stackexchange.com/questions/182057/why-do-we-use-story-points-instead-of-man-days-when-estimating-user-stories">Story points</a> are by no means a silver bullet, but they&rsquo;re better than estimating in hours. Try out different relative estimation techniques such as <a href="http://www.gettingagile.com/2008/07/04/affinity-estimating-a-how-to/">affinity estimation</a> or planning poker.</p>

<p><strong>Protip:</strong> Don&rsquo;t give up. It&rsquo;s hard. As my next point explains&hellip;</p>

<h2>Being agile is <strong>difficult</strong></h2>

<p>To properly implement Scrum (which is not the only way of being agile, but it&rsquo;s a good start), you may have to do things you&rsquo;d be otherwise uncomfortable with in any other social situation.</p>

<ul>
<li>Aggressively timeboxing meetings can make a Scrum Master look rude but can greatly improve the efficiency of meetings.</li>
<li>Explaining to a client that interrupting a sprint for a &lsquo;critical&rsquo; (not really critical) task can have repercussions for productivity. <a href="http://coder.cl/2012/03/programmers-are-not-resources/">(Programmers are not units of work.)</a></li>
<li>(Developers) Being empowered to get on and do your job.</li>
<li>(Managers) Trusting your developers to do their job.</li>
<li>Being &lsquo;that guy&rsquo; who says <em>&ldquo;this isn&rsquo;t going to work, we should stop.&rdquo;</em></li>
<li>Not planning months/years in advance. You may feel better, but that won&rsquo;t matter when you overshoot your deadline by 6 months. <em>Also, your client will be annoyed when you spent all that time estimating and you were wrong anyway!</em></li>
</ul>


<p>These are all things that traditional common sense say are bad. Rudeness, managers not managing, admitting defeat early on, not planning well. You shouldn&rsquo;t do these things! Except that actually they&rsquo;re fine.</p>

<ul>
<li>Rudeness isn&rsquo;t as rude when its for the good of a development team. Even if you feel uncomfortable at the time.</li>
<li>Telling clients how things are done may seem like biting the hand that feeds you. But setting expectations is equally as important.</li>
<li>Developers are smart. They don&rsquo;t need to be babysat.</li>
<li>Managers are natural risk-mitigators. But there is a clear dividing line between manager and Scrum Master.</li>
<li>Being &lsquo;that guy&rsquo; can save your company months of wasted effort and money.</li>
<li>Planning in short bursts promotes focus and accepts the fact that estimates more than 2 weeks(?) in the future are essentially useless.</li>
</ul>


<h2>Being agile is fun</h2>

<p>When your team is settled in to the agile flow, it becomes fun quickly.</p>

<p><strong>Gone</strong> are the semi-awkward &ldquo;I don&rsquo;t think we should talk about that here&rdquo; moments in the daily stand-up. It becomes a game as to which team can get their stand-up finished most efficiently.</p>

<p><strong>Gone</strong> are the awkward messages from clients explaining that they want that feature right now.</p>

<p><strong>Gone</strong> are micromanagers and in come Scrum Masters looking out for their development teams.</p>

<p><strong>Gone</strong> are &lsquo;code-monkey&rsquo; developers who wait patiently for orders before dutifully producing code in a caffeine-fuelled stupor.</p>

<p><strong>Gone</strong> are the 2 year development cycles that inevitably end in failure.</p>

<h2>But it&rsquo;s hard.</h2>

<p>Yeah. Nothing I can do about that. You&rsquo;ll have to decide if its worth it for you. These are based on my experiences and they are by no means representative of the rest of developer-kind.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In praise of getting shit done.]]></title>
    <link href="http://maxehmookau.github.io/blog/2014/02/14/in-praise-of-getting-shit-done/"/>
    <updated>2014-02-14T21:18:00+00:00</updated>
    <id>http://maxehmookau.github.io/blog/2014/02/14/in-praise-of-getting-shit-done</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve learnt a lot about myself in the last 18 months, both personally and professionally. This post is just about one of those things: <strong>I&rsquo;m impatient.</strong></p>

<p>Got a good idea? <strong>Go and do it.</strong> Please, please, <strong>please</strong> don&rsquo;t create a focus group, send our a survey, sit on the idea for 6 weeks, get a load of opinions, create a solid business plan, find a market fit or any of that shit. <strong>JUST DO IT!</strong> But be prepared to fail. (It&rsquo;s allowed).</p>

<p>That stuff is important. But not yet. Currently all you have is yourself, an idea and an early retirement plan if it all goes well. It&rsquo;s worth nothing. So stop thinking outside the box, formulating a plan, conceptualising, projecting and even planning.</p>

<h3><strong>Just go and get some shit done.</strong></h3>
]]></content>
  </entry>
  
</feed>
